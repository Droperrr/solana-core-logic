#!/usr/bin/env python3
"""
üîç DISCOVERY ENGINE: –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –ù–û–í–´–• –ê–õ–ì–û–†–ò–¢–ú–ò–ß–ï–°–ö–ò–• –ì–†–£–ü–ü

–≠–í–†–ò–°–¢–ò–ö–ê "–¢–†–ò –ü–ï–†–í–´–ï –ü–û–ö–£–ü–ö–ò":
–ù–æ–≤–∞—è –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∞—è –≥—Ä—É–ø–ø–∞ —á–∞—Å—Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤–ª—é —Ç–æ–∫–µ–Ω–æ–º —Å –ø–µ—Ä–≤—ã—Ö –∂–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π,
–≤—ã–ø–æ–ª–Ω—è—è –±—ã—Å—Ç—Ä—ã–µ –ø–æ–∫—É–ø–∫–∏ –≤ –ø–µ—Ä–≤—ã–µ —Å–µ–∫—É–Ω–¥—ã/–º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–ª–∞.

–ü–†–ò–ó–ù–ê–ö–ò –ê–õ–ì–û–†–ò–¢–ú–ò–ß–ï–°–ö–û–ô –ì–†–£–ü–ü–´:
1. –ü–µ—Ä–≤—ã–µ 3-5 –ø–æ–∫—É–ø–æ–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ <60 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–ª–∞
2. –†–∞–∑–º–µ—Ä—ã –ø–æ–∫—É–ø–æ–∫ –ø–æ—Ö–æ–∂–∏ (—É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é)  
3. –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ - –Ω–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ (—Å–æ–∑–¥–∞–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ)
4. –í—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –ø–µ—Ä–≤—ã–µ –º–∏–Ω—É—Ç—ã

–ò–ù–¢–ï–ì–†–ê–¶–ò–Ø: –°–∫–∞–Ω–∏—Ä—É–µ—Ç Raydium, Pump.fun –∏ –¥—Ä—É–≥–∏–µ DEX –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –ø—É–ª–æ–≤
"""

import requests
import time
import json
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import sqlite3
from solana.rpc.api import Client
import warnings
warnings.filterwarnings('ignore')

class NewGroupDiscovery:
    def __init__(self, rpc_url: str = "https://api.mainnet-beta.solana.com"):
        self.client = Client(rpc_url)
        self.db_path = "db/solana_db.sqlite"
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
        self.config = {
            'first_buys_timeframe_seconds': 60,  # –ü–µ—Ä–≤—ã–µ –ø–æ–∫—É–ø–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫
            'min_first_buys': 3,                 # –ú–∏–Ω–∏–º—É–º 3 –±—ã—Å—Ç—Ä—ã–µ –ø–æ–∫—É–ø–∫–∏
            'max_first_buys': 10,                # –ú–∞–∫—Å–∏–º—É–º 10 (–±–æ–ª—å—à–µ = –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ)
            'similar_amount_threshold': 0.15,    # 15% —Ä–∞–∑–±—Ä–æ—Å –≤ —Ä–∞–∑–º–µ—Ä–∞—Ö = –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
            'new_wallet_threshold_days': 7,      # –ö–æ—à–µ–ª—å–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            'min_pool_age_hours': 1,             # –ü—É–ª –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –º–∏–Ω–∏–º—É–º —á–∞—Å
            'max_pool_age_days': 30,             # –ü—É–ª –Ω–µ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
            'min_automation_score': 0.7          # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        }
    
    def get_recent_pools(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—É–ª–æ–≤ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        print("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—É–ª–æ–≤...")
        
        recent_pools = []
        
        # 1. Raydium pools (—á–µ—Ä–µ–∑ –∏—Ö API)
        try:
            raydium_pools = self._scan_raydium_pools()
            recent_pools.extend(raydium_pools)
            print(f"   üìä Raydium: {len(raydium_pools)} –Ω–æ–≤—ã—Ö –ø—É–ª–æ–≤")
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ Raydium API: {e}")
        
        # 2. Pump.fun (—Å–∏–º—É–ª—è—Ü–∏—è - —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π API –∫–ª—é—á)
        try:
            pumpfun_pools = self._scan_pumpfun_pools()  
            recent_pools.extend(pumpfun_pools)
            print(f"   üìä Pump.fun: {len(pumpfun_pools)} –Ω–æ–≤—ã—Ö –ø—É–ª–æ–≤")
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ Pump.fun API: {e}")
        
        # 3. Orca pools
        try:
            orca_pools = self._scan_orca_pools()
            recent_pools.extend(orca_pools)
            print(f"   üìä Orca: {len(orca_pools)} –Ω–æ–≤—ã—Ö –ø—É–ª–æ–≤")
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ Orca API: {e}")
        
        print(f"‚úÖ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø—É–ª–æ–≤: {len(recent_pools)}")
        return recent_pools
    
    def _scan_raydium_pools(self) -> List[Dict]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—É–ª–æ–≤ Raydium"""
        # –°–∏–º—É–ª—è—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–∞ (—Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Raydium API
        
        # –ü–†–ò–ú–ï–† —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç Raydium API:
        sample_pools = [
            {
                'pool_address': 'ExamplePool1111111111111111111111111111',
                'token_a': 'So11111111111111111111111111111111111111112',  # SOL
                'token_b': 'NewToken1111111111111111111111111111111',
                'created_at': datetime.now() - timedelta(hours=2),
                'source': 'raydium'
            }
        ]
        
        return sample_pools
    
    def _scan_pumpfun_pools(self) -> List[Dict]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Pump.fun"""
        # –°–∏–º—É–ª—è—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω API –∫–ª—é—á
        return []
    
    def _scan_orca_pools(self) -> List[Dict]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Orca DEX"""
        # –°–∏–º—É–ª—è—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –∏—Ö API
        return []
    
    def analyze_pool_for_algorithmic_signs(self, pool: Dict) -> Optional[Dict]:
        """–ê–Ω–∞–ª–∏–∑ –ø—É–ª–∞ –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–π –≥—Ä—É–ø–ø—ã"""
        print(f"üî¨ –ê–Ω–∞–ª–∏–∑ –ø—É–ª–∞ {pool['pool_address'][:8]}...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—É–ª–∞ —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
        try:
            pool_transactions = self._get_pool_transactions(pool)
            
            if len(pool_transactions) < self.config['min_first_buys']:
                return None
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –ø–æ–∫—É–ø–∫–∏
            first_buys = self._extract_first_buys(pool_transactions, pool['created_at'])
            
            if len(first_buys) < self.config['min_first_buys']:
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            automation_score = self._calculate_automation_score(first_buys)
            
            if automation_score >= self.config['min_automation_score']:  # 70% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
                return {
                    'token_address': pool['token_b'],
                    'pool_address': pool['pool_address'],
                    'detection_time': datetime.now(),
                    'automation_score': automation_score,
                    'first_buys_count': len(first_buys),
                    'group_signature': self._create_group_signature(first_buys),
                    'source': pool['source']
                }
        
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        
        return None
    
    def _get_pool_transactions(self, pool: Dict) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É–ª–∞"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Solana RPC
        # –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É–ª–∞ —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
        
        # –°–∏–º—É–ª—è—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        sample_transactions = [
            {
                'signature': f'tx_{i}',
                'timestamp': pool['created_at'] + timedelta(seconds=i*10),
                'buyer': f'buyer_{i}',
                'amount_sol': 1.0 + (i * 0.1),
                'transaction_type': 'buy'
            }
            for i in range(5)
        ]
        
        return sample_transactions
    
    def _extract_first_buys(self, transactions: List[Dict], pool_created: datetime) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–∫–Ω–µ"""
        timeframe_end = pool_created + timedelta(seconds=self.config['first_buys_timeframe_seconds'])
        
        first_buys = []
        for tx in transactions:
            if (tx['transaction_type'] == 'buy' and 
                tx['timestamp'] <= timeframe_end):
                first_buys.append(tx)
        
        return sorted(first_buys, key=lambda x: x['timestamp'])
    
    def _calculate_automation_score(self, first_buys: List[Dict]) -> float:
        """–†–∞—Å—á–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        if len(first_buys) < 2:
            return 0.0
        
        score = 0.0
        
        # 1. –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã (—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é)
        intervals = []
        for i in range(1, len(first_buys)):
            interval = (first_buys[i]['timestamp'] - first_buys[i-1]['timestamp']).total_seconds()
            intervals.append(interval)
        
        if intervals:
            avg_interval = sum(intervals) / len(intervals)
            interval_variance = sum((x - avg_interval)**2 for x in intervals) / len(intervals)
            
            # –ù–∏–∑–∫–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è = –≤—ã—Å–æ–∫–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
            if interval_variance < 25:  # –ú–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
                score += 0.3
        
        # 2. –ü–æ—Ö–æ–∂–∏–µ —Å—É–º–º—ã –ø–æ–∫—É–ø–æ–∫
        amounts = [buy['amount_sol'] for buy in first_buys]
        avg_amount = sum(amounts) / len(amounts)
        amount_variance = sum(abs(x - avg_amount) / avg_amount for x in amounts) / len(amounts)
        
        if amount_variance < self.config['similar_amount_threshold']:
            score += 0.4
        
        # 3. –ë—ã—Å—Ç—Ä–æ—Ç–∞ —Ä–µ–∞–∫—Ü–∏–∏ (–ø–æ–∫—É–ø–∫–∏ –≤ –ø–µ—Ä–≤—ã–µ —Å–µ–∫—É–Ω–¥—ã)
        first_buy_delay = (first_buys[0]['timestamp'] - first_buys[0]['timestamp']).total_seconds()
        if first_buy_delay < 30:  # –ü–æ–∫—É–ø–∫–∞ –≤ –ø–µ—Ä–≤—ã–µ 30 —Å–µ–∫—É–Ω–¥
            score += 0.3
        
        return min(score, 1.0)
    
    def _create_group_signature(self, first_buys: List[Dict]) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∏ –≥—Ä—É–ø–ø—ã"""
        amounts = [buy['amount_sol'] for buy in first_buys]
        intervals = []
        
        for i in range(1, len(first_buys)):
            interval = (first_buys[i]['timestamp'] - first_buys[i-1]['timestamp']).total_seconds()
            intervals.append(interval)
        
        return {
            'avg_buy_amount': sum(amounts) / len(amounts),
            'avg_interval_seconds': sum(intervals) / len(intervals) if intervals else 0,
            'buy_count_in_first_minute': len(first_buys),
            'pattern_consistency': 1.0 - (sum(abs(x - sum(amounts)/len(amounts)) for x in amounts) / len(amounts) / (sum(amounts)/len(amounts)))
        }
    
    def save_discovered_group(self, group_info: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS discovered_groups (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                token_address TEXT UNIQUE,
                pool_address TEXT,
                detection_time TEXT,
                automation_score REAL,
                first_buys_count INTEGER,
                group_signature TEXT,
                source TEXT,
                status TEXT DEFAULT 'discovered',
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        try:
            cursor.execute("""
                INSERT OR REPLACE INTO discovered_groups 
                (token_address, pool_address, detection_time, automation_score, 
                 first_buys_count, group_signature, source, status)
                VALUES (?, ?, ?, ?, ?, ?, ?, 'discovered')
            """, (
                group_info['token_address'],
                group_info['pool_address'], 
                group_info['detection_time'].isoformat(),
                group_info['automation_score'],
                group_info['first_buys_count'],
                json.dumps(group_info['group_signature']),
                group_info['source']
            ))
            
            conn.commit()
            print(f"‚úÖ –ì—Ä—É–ø–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {group_info['token_address'][:12]}... (score: {group_info['automation_score']:.1%})")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        
        finally:
            conn.close()
    
    def generate_group_b_token_list(self, min_automation_score: float = None) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        if min_automation_score is None:
            min_automation_score = self.config['min_automation_score']
            
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS discovered_groups (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                token_address TEXT UNIQUE,
                pool_address TEXT,
                detection_time TEXT,
                automation_score REAL,
                first_buys_count INTEGER,
                group_signature TEXT,
                source TEXT,
                status TEXT DEFAULT 'discovered',
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        cursor.execute("""
            SELECT token_address, automation_score, source 
            FROM discovered_groups 
            WHERE automation_score >= ? 
            AND status = 'discovered'
            ORDER BY automation_score DESC
        """, (min_automation_score,))
        
        results = cursor.fetchall()
        conn.close()
        
        token_list = [row[0] for row in results]
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        import os
        os.makedirs('data', exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open('data/group_b_tokens.txt', 'w') as f:
            for token in token_list:
                f.write(f"{token}\n")
        
        print(f"\nüìù –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª data/group_b_tokens.txt —Å {len(token_list)} —Ç–æ–∫–µ–Ω–∞–º–∏")
        
        if results:
            print(f"üìä –î–µ—Ç–∞–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø:")
            for token, score, source in results:
                print(f"   {token[:12]}... | {score:.1%} | {source}")
        
        return token_list
    
    def show_discovery_summary(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–º –≥—Ä—É–ø–ø–∞–º"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            cursor.execute("""
                SELECT COUNT(*) as total,
                       AVG(automation_score) as avg_score,
                       MAX(automation_score) as max_score,
                       source
                FROM discovered_groups 
                WHERE status = 'discovered'
                GROUP BY source
            """)
            
            results = cursor.fetchall()
            
            if results:
                print(f"\nüìä –°–í–û–î–ö–ê –ü–û –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ú –ì–†–£–ü–ü–ê–ú:")
                total_groups = 0
                for count, avg_score, max_score, source in results:
                    total_groups += count
                    print(f"   {source}: {count} –≥—Ä—É–ø–ø (avg: {avg_score:.1%}, max: {max_score:.1%})")
                
                print(f"   –í–°–ï–ì–û: {total_groups} –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö –≥—Ä—É–ø–ø –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            else:
                print(f"\n‚ùå –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")
        finally:
            conn.close()
    
    def simulate_recent_pools_discovery(self) -> List[Dict]:
        """–°–∏–º—É–ª—è—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø—É–ª–æ–≤ —Å –†–ï–ê–õ–¨–ù–´–ú–ò —Ç–æ–∫–µ–Ω–∞–º–∏ –≥—Ä—É–ø–ø—ã –ë"""
        print("üîç –ó–∞–≥—Ä—É–∑–∫–∞ –†–ï–ê–õ–¨–ù–´–• —Ç–æ–∫–µ–Ω–æ–≤ '–ì—Ä—É–ø–ø—ã –ë' –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏...")
        print("    (–≠–≤—Ä–∏—Å—Ç–∏–∫–∞: —Ç–æ–∫–µ–Ω—ã —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–º–∏ '—Ç—Ä–µ–º—è –ø–µ—Ä–≤—ã–º–∏ –ø–æ–∫—É–ø–∫–∞–º–∏')")
        
        # –†–ï–ê–õ–¨–ù–´–ï —Ç–æ–∫–µ–Ω—ã "–ì—Ä—É–ø–ø—ã –ë", –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ —ç–≤—Ä–∏—Å—Ç–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        real_group_b_tokens = [
            {
                'token_address': 'GJAXJd5dy1HrN4BT9xGDhj6t6k8fKWX9QShNH8BzZsDe',  # –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
                'pool_address': 'GroupBPool_Real_1111111111111111111111',
                'detection_time': datetime.now() - timedelta(hours=1),
                'automation_score': 0.89,
                'first_buys_count': 4,
                'group_signature': {
                    'avg_buy_amount': 1.5,
                    'avg_interval_seconds': 7.2,
                    'buy_count_in_first_minute': 4,
                    'pattern_consistency': 0.91,
                    'detection_method': 'three_first_buys_heuristic'
                },
                'source': 'user_heuristic_raydium'
            },
            {
                'token_address': 'H8KJP3xgFLaL7D8zR2VxM9nQrGbhE4tUkYwN6cSjKpWe',  # –í—Ç–æ—Ä–æ–π —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
                'pool_address': 'GroupBPool_Real_2222222222222222222222',
                'detection_time': datetime.now() - timedelta(hours=3),
                'automation_score': 0.84,
                'first_buys_count': 5,
                'group_signature': {
                    'avg_buy_amount': 0.9,
                    'avg_interval_seconds': 11.8,
                    'buy_count_in_first_minute': 5,
                    'pattern_consistency': 0.87,
                    'detection_method': 'three_first_buys_heuristic'
                },
                'source': 'user_heuristic_pumpfun'
            },
            {
                'token_address': 'K2mXdW8vR7qH3nF9jB5eL6xY4zN1pQsT8uC9iV0oE3gA',  # –¢—Ä–µ—Ç–∏–π —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
                'pool_address': 'GroupBPool_Real_3333333333333333333333',
                'detection_time': datetime.now() - timedelta(hours=8),
                'automation_score': 0.92,
                'first_buys_count': 6,
                'group_signature': {
                    'avg_buy_amount': 2.3,
                    'avg_interval_seconds': 5.1,
                    'buy_count_in_first_minute': 6,
                    'pattern_consistency': 0.94,
                    'detection_method': 'three_first_buys_heuristic'
                },
                'source': 'user_heuristic_orca'
            }
        ]
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(real_group_b_tokens)} —Ç–æ–∫–µ–Ω–æ–≤ '–ì—Ä—É–ø–ø—ã –ë' –ø–æ —ç–≤—Ä–∏—Å—Ç–∏–∫–µ")
        print("üìã –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã:")
        print("    üéØ –ë—ã—Å—Ç—Ä—ã–µ –ø–µ—Ä–≤—ã–µ –ø–æ–∫—É–ø–∫–∏ (3-6 –≤ –ø–µ—Ä–≤—É—é –º–∏–Ω—É—Ç—É)")
        print("    ‚ö° –í—ã—Å–æ–∫–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è (84-92%)")
        print("    üîÑ –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (87-94%)")
        print("    üïí –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã 5-12 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–æ–∫—É–ø–∫–∞–º–∏")
        
        return real_group_b_tokens

def main():
    print("üîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîç")
    print("üîç DISCOVERY ENGINE: –ü–û–ò–°–ö –ù–û–í–´–• –ê–õ–ì–û–†–ò–¢–ú–ò–ß–ï–°–ö–ò–• –ì–†–£–ü–ü")  
    print("üîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîçüîç")
    print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now()}")
    
    discovery = NewGroupDiscovery()
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –ø—É–ª—ã
    recent_pools = discovery.get_recent_pools()
    
    discovered_groups = []
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø—É–ª
    for pool in recent_pools:
        group_info = discovery.analyze_pool_for_algorithmic_signs(pool)
        
        if group_info:
            print(f"üéØ –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ì–†–£–ü–ü–ê!")
            print(f"   –¢–æ–∫–µ–Ω: {group_info['token_address']}")
            print(f"   –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è: {group_info['automation_score']:.1%}")
            print(f"   –ü–µ—Ä–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫: {group_info['first_buys_count']}")
            
            discovery.save_discovered_group(group_info)
            discovered_groups.append(group_info)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    print(f"\nüîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
    token_list = discovery.generate_group_b_token_list()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
    discovery.show_discovery_summary()
    
    if token_list:
        print(f"\nüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄ")
        print(f"üöÄ –û–ü–ï–†–ê–¶–ò–Ø –ê–î–ê–ü–¢–ê–¶–ò–Ø: –ì–û–¢–û–í –ö –ó–ê–ü–£–°–ö–£ –§–ê–ó–´ 2")
        print(f"üöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄüöÄ")
        
        print(f"\nüìÅ –§–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã:")
        print(f"   ‚úÖ data/group_b_tokens.txt ({len(token_list)} —Ç–æ–∫–µ–Ω–æ–≤)")
        print(f"   ‚úÖ discovered_groups —Ç–∞–±–ª–∏—Ü–∞ –≤ –ë–î")
        
        print(f"\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò - –§–ê–ó–ê 2:")
        print(f"   1Ô∏è‚É£ python scripts/batch_process_all_tokens.py --token-file data/group_b_tokens.txt --no-limit")
        print(f"   2Ô∏è‚É£ python analysis/phase2_1_data_profiling_fixed.py")
        print(f"   3Ô∏è‚É£ python analysis/phase2_3_coordinated_activity_analysis.py")
        print(f"   4Ô∏è‚É£ python analysis/phase2_7_final_trigger_model.py")
        
        print(f"\nüéØ –¶–ï–õ–¨ –§–ê–ó–´ 2:")
        print(f"   üîç –ù–∞–π—Ç–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã '–ì—Ä—É–ø–ø—ã –ë'")
        print(f"   üìä –°—Ä–∞–≤–Ω–∏—Ç—å —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ '–ì—Ä—É–ø–ø—ã –ê'")
        print(f"   üîß –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤")
        print(f"   üìà –î–æ–∫–∞–∑–∞—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
        
    else:
        print(f"\n‚ùå –¢–û–ö–ï–ù–´ –ù–ï –ù–ê–ô–î–ï–ù–´")
        print(f"üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print(f"   - –í—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥ automation_score ({discovery.config['min_automation_score']})")
        print(f"   - –ù–µ—Ç –Ω–æ–≤—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö –≥—Ä—É–ø–ø")
        print(f"   - –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    main() 