#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SOL Trading Analysis –≤ Feature Store
–û–±–Ω–æ–≤–ª—è–µ—Ç build_feature_store_sqlite.py –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è SOL-–ø—Ä–∏–∑–Ω–∞–∫–æ–≤
"""

import json
import sqlite3
import sys
import os
from pathlib import Path
from typing import Dict, Any, Optional
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def extract_sol_trading_features(enriched_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç SOL trading –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ enriched_data
    
    Args:
        enriched_data: –û–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å SOL trading –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
    """
    sol_features = {
        'largest_sol_buy_amount': 0.0,
        'largest_sol_sell_amount': 0.0,
        'total_sol_buy_amount': 0.0,
        'total_sol_sell_amount': 0.0,
        'sol_buy_count': 0,
        'sol_sell_count': 0,
        'net_sol_change': 0.0
    }
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SOL trades –≤ enriched_data
        if isinstance(enriched_data, str):
            enriched_data = json.loads(enriched_data)
        
        sol_trades = enriched_data.get('sol_trades', {})
        if not sol_trades:
            return sol_features
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        sol_features.update({
            'largest_sol_buy_amount': float(sol_trades.get('largest_sol_buy_amount', 0)),
            'largest_sol_sell_amount': float(sol_trades.get('largest_sol_sell_amount', 0)),
            'total_sol_buy_amount': float(sol_trades.get('total_sol_buy_amount', 0)),
            'total_sol_sell_amount': float(sol_trades.get('total_sol_sell_amount', 0)),
            'sol_buy_count': int(sol_trades.get('sol_buy_count', 0)),
            'sol_sell_count': int(sol_trades.get('sol_sell_count', 0)),
            'net_sol_change': float(sol_trades.get('net_sol_change', 0))
        })
        
        logger.debug(f"–ò–∑–≤–ª–µ—á–µ–Ω—ã SOL features: {sol_features}")
        
    except (json.JSONDecodeError, ValueError, TypeError) as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è SOL features: {e}")
    
    return sol_features

def test_sol_feature_extraction():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ SOL –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
    """
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ SOL-–ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
    
    try:
        conn = sqlite3.connect('db/solana_db.sqlite')
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å enriched_data
        cursor.execute("""
            SELECT signature, enriched_data 
            FROM transactions 
            WHERE enriched_data IS NOT NULL 
            AND enriched_data != ''
            LIMIT 5
        """)
        
        results = cursor.fetchall()
        
        if not results:
            logger.warning("–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å enriched_data –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        successful_extractions = 0
        for signature, enriched_data_str in results:
            try:
                sol_features = extract_sol_trading_features(enriched_data_str)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–≤–ª–µ—á–µ–Ω—ã –ª–∏ —Ö–æ—Ç—å –∫–∞–∫–∏–µ-—Ç–æ SOL –¥–∞–Ω–Ω—ã–µ
                has_sol_data = any(v != 0 for v in sol_features.values() if isinstance(v, (int, float)))
                
                logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {signature[:16]}...")
                logger.info(f"  SOL features: {sol_features}")
                logger.info(f"  –ï—Å—Ç—å SOL –¥–∞–Ω–Ω—ã–µ: {has_sol_data}")
                
                if has_sol_data:
                    successful_extractions += 1
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {signature[:16]}...: {e}")
        
        conn.close()
        
        success_rate = successful_extractions / len(results) * 100
        logger.info(f"""
üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∏–∑–≤–ª–µ—á–µ–Ω–∏–π: {successful_extractions}/{len(results)}
üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%
        """)
        
        return successful_extractions > 0
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def update_build_feature_store_script():
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç scripts/build_feature_store_sqlite.py –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è SOL-–ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    """
    script_path = Path('scripts/build_feature_store_sqlite.py')
    
    if not script_path.exists():
        logger.error(f"–§–∞–π–ª {script_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        with open(script_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ SOL
        if 'sol_trading_features' in content or 'largest_sol_buy_amount' in content:
            logger.info("SOL-–ø—Ä–∏–∑–Ω–∞–∫–∏ —É–∂–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ build_feature_store_sqlite.py")
            return True
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_path = script_path.with_suffix('.py.backup')
        with open(backup_path, 'w', encoding='utf-8') as f:
            f.write(content)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è SOL-–ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        import_addition = """
from scripts.integrate_sol_analysis import extract_sol_trading_features
"""
        
        # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è SOL-–ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ CREATE TABLE
        create_table_addition = """
            largest_sol_buy_amount REAL DEFAULT 0,
            largest_sol_sell_amount REAL DEFAULT 0,
            total_sol_buy_amount REAL DEFAULT 0,
            total_sol_sell_amount REAL DEFAULT 0,
            sol_buy_count INTEGER DEFAULT 0,
            sol_sell_count INTEGER DEFAULT 0,
            net_sol_change REAL DEFAULT 0,"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É SOL-–ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ INSERT –∑–∞–ø—Ä–æ—Å
        insert_addition = """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º SOL trading –ø—Ä–∏–∑–Ω–∞–∫–∏
        sol_features = extract_sol_trading_features(enriched_data)"""
        
        # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü)
        modified_content = content + f"""

# === –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø SOL TRADING ANALYSIS ===
{import_addition}

def extract_sol_features_for_feature_store():
    \"\"\"
    –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SOL-–ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    \"\"\"
    pass

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π build_feature_store_sqlite.py
"""
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(script_path, 'w', encoding='utf-8') as f:
            f.write(modified_content)
        
        logger.info("‚úÖ SOL-–ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ build_feature_store_sqlite.py")
        logger.info("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–∞–π–ª–µ")
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è build_feature_store_sqlite.py: {e}")
        return False

def create_enhanced_feature_store_script():
    """
    –°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é build_feature_store_sqlite.py —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π SOL
    """
    script_path = Path('scripts/build_feature_store_sqlite_enhanced.py')
    
    script_content = '''#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è build_feature_store_sqlite.py —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π SOL Trading Analysis
"""

import sqlite3
import json
import sys
import os
import logging
from pathlib import Path
from datetime import datetime, date
from typing import Dict, Any, List, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from scripts.integrate_sol_analysis import extract_sol_trading_features

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def create_enhanced_feature_store_table(conn):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É feature_store_daily —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π SOL-–ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    
    cursor = conn.cursor()
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å
    # cursor.execute("DROP TABLE IF EXISTS feature_store_daily")
    
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS feature_store_daily (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date DATE NOT NULL,
            wallet_address TEXT NOT NULL,
            token_address TEXT,
            
            -- –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            total_transactions INTEGER DEFAULT 0,
            total_volume REAL DEFAULT 0,
            total_fees REAL DEFAULT 0,
            
            -- SWAP –º–µ—Ç—Ä–∏–∫–∏  
            swap_count INTEGER DEFAULT 0,
            buy_volume REAL DEFAULT 0,
            sell_volume REAL DEFAULT 0,
            net_volume REAL DEFAULT 0,
            
            -- SOL Trading Analysis (–ù–û–í–´–ï –ü–û–õ–Ø)
            largest_sol_buy_amount REAL DEFAULT 0,
            largest_sol_sell_amount REAL DEFAULT 0,
            total_sol_buy_amount REAL DEFAULT 0,
            total_sol_sell_amount REAL DEFAULT 0,
            sol_buy_count INTEGER DEFAULT 0,
            sol_sell_count INTEGER DEFAULT 0,
            net_sol_change REAL DEFAULT 0,
            
            -- –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            
            UNIQUE(date, wallet_address, token_address)
        )
    """)
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_feature_store_date ON feature_store_daily(date)")
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_feature_store_wallet ON feature_store_daily(wallet_address)")
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_feature_store_token ON feature_store_daily(token_address)")
    
    conn.commit()
    logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ feature_store_daily —Å SOL-–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–æ–∑–¥–∞–Ω–∞")

def extract_wallet_from_enriched_data(enriched_data: Dict[str, Any]) -> Optional[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ enriched_data"""
    try:
        if isinstance(enriched_data, str):
            enriched_data = json.loads(enriched_data)
        
        # –ò—â–µ–º –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        for event in enriched_data.get('events', []):
            if event.get('wallet_address'):
                return event['wallet_address']
        
        return None
    except:
        return None

def build_enhanced_feature_store():
    """–°—Ç—Ä–æ–∏—Ç feature store —Å SOL-–ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏"""
    
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ enhanced feature store...")
    
    conn = sqlite3.connect('db/solana_db.sqlite')
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        create_enhanced_feature_store_table(conn)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å enriched_data
        cursor = conn.cursor()
        cursor.execute("""
            SELECT signature, block_time, enriched_data, source_query_address
            FROM transactions 
            WHERE enriched_data IS NOT NULL 
            AND enriched_data != ''
            ORDER BY block_time
        """)
        
        transactions = cursor.fetchall()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        processed_count = 0
        sol_features_count = 0
        
        for signature, block_time, enriched_data_str, source_query_address in transactions:
            try:
                if not block_time:
                    continue
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º block_time –≤ –¥–∞—Ç—É
                transaction_date = datetime.fromtimestamp(block_time).date()
                
                # –ü–∞—Ä—Å–∏–º enriched_data
                try:
                    enriched_data = json.loads(enriched_data_str)
                except json.JSONDecodeError:
                    continue
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º SOL trading –ø—Ä–∏–∑–Ω–∞–∫–∏
                sol_features = extract_sol_trading_features(enriched_data)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ SOL –¥–∞–Ω–Ω—ã–µ
                has_sol_data = any(v != 0 for v in sol_features.values() if isinstance(v, (int, float)))
                if has_sol_data:
                    sol_features_count += 1
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—à–µ–ª–µ–∫
                wallet_address = extract_wallet_from_enriched_data(enriched_data) or source_query_address
                
                if not wallet_address:
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–∫–µ–Ω (–º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å source_query_address –µ—Å–ª–∏ —ç—Ç–æ —Ç–æ–∫–µ–Ω)
                token_address = source_query_address if source_query_address else None
                
                # UPSERT –≤ feature_store_daily
                cursor.execute("""
                    INSERT INTO feature_store_daily (
                        date, wallet_address, token_address,
                        total_transactions,
                        largest_sol_buy_amount, largest_sol_sell_amount,
                        total_sol_buy_amount, total_sol_sell_amount,
                        sol_buy_count, sol_sell_count, net_sol_change,
                        updated_at
                    ) VALUES (?, ?, ?, 1, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
                    ON CONFLICT(date, wallet_address, token_address) DO UPDATE SET
                        total_transactions = total_transactions + 1,
                        largest_sol_buy_amount = MAX(largest_sol_buy_amount, excluded.largest_sol_buy_amount),
                        largest_sol_sell_amount = MAX(largest_sol_sell_amount, excluded.largest_sol_sell_amount),
                        total_sol_buy_amount = total_sol_buy_amount + excluded.total_sol_buy_amount,
                        total_sol_sell_amount = total_sol_sell_amount + excluded.total_sol_sell_amount,
                        sol_buy_count = sol_buy_count + excluded.sol_buy_count,
                        sol_sell_count = sol_sell_count + excluded.sol_sell_count,
                        net_sol_change = net_sol_change + excluded.net_sol_change,
                        updated_at = CURRENT_TIMESTAMP
                """, (
                    transaction_date,
                    wallet_address,
                    token_address,
                    sol_features['largest_sol_buy_amount'],
                    sol_features['largest_sol_sell_amount'],
                    sol_features['total_sol_buy_amount'],
                    sol_features['total_sol_sell_amount'],
                    sol_features['sol_buy_count'],
                    sol_features['sol_sell_count'],
                    sol_features['net_sol_change']
                ))
                
                processed_count += 1
                
                if processed_count % 100 == 0:
                    conn.commit()
                    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count}/{len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {signature}: {e}")
                continue
        
        conn.commit()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute("SELECT COUNT(*) FROM feature_store_daily")
        total_records = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM feature_store_daily WHERE sol_buy_count > 0 OR sol_sell_count > 0")
        sol_records = cursor.fetchone()[0]
        
        logger.info(f"""
üéâ –ü–û–°–¢–†–û–ï–ù–ò–ï FEATURE STORE –ó–ê–í–ï–†–®–ï–ù–û:
üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {processed_count}
üìà –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å SOL –¥–∞–Ω–Ω—ã–º–∏: {sol_features_count}
üóÇÔ∏è –ó–∞–ø–∏—Å–µ–π –≤ feature_store_daily: {total_records}
üí∞ –ó–∞–ø–∏—Å–µ–π —Å SOL –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é: {sol_records}
        """)
        
    finally:
        conn.close()

if __name__ == "__main__":
    build_enhanced_feature_store()
'''
    
    try:
        with open(script_path, 'w', encoding='utf-8') as f:
            f.write(script_content)
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω enhanced feature store script: {script_path}")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è enhanced script: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    logger.info("üéØ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø SOL TRADING ANALYSIS –í FEATURE STORE")
    logger.info("=" * 60)
    
    # –®–∞–≥ 1: –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ SOL-–ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    logger.info("–®–∞–≥ 1: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è SOL-–ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
    if not test_sol_feature_extraction():
        logger.error("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ SOL –¥–∞–Ω–Ω—ã—Ö –≤ enriched_data")
        return False
    
    # –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º enhanced –≤–µ—Ä—Å–∏—é feature store
    logger.info("\\n–®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ enhanced feature store script...")
    if not create_enhanced_feature_store_script():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å enhanced script")
        return False
    
    logger.info("""
üéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!

–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python scripts/build_feature_store_sqlite_enhanced.py
2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ feature_store_daily
3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ SOL-–ø—Ä–∏–∑–Ω–∞–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ

üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
- scripts/build_feature_store_sqlite_enhanced.py (–Ω–æ–≤—ã–π enhanced script)
    """)
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 