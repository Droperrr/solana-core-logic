// scripts/verify_core.ts
import { StateDiffAnalyzer } from '../src/src/StateDiffAnalyzer.js';
import { EventAggregator } from '../src/src/EventAggregator.js';
import { JupiterEnricher } from '../src/src/plugins/JupiterEnricher.js';
import { RawTransaction, SwapEvent } from '../src/src/types.js';
import * as fs from 'fs';
import * as path from 'path';

async function verifyCore() {
    console.log('--- üî¨ Core Verification Script ---');
    
    // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const analyzer = new StateDiffAnalyzer();
    const aggregator = new EventAggregator({}, [new JupiterEnricher()]);
    console.log('‚úÖ Components initialized.');

    // 2. –ó–∞–≥—Ä—É–∑–∫–∞ —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ —Ñ–∏–∫—Å—Ç—É—Ä—ã
    const fixturePath = path.resolve(
        process.cwd(),
        'tests/regression/fixtures/2WjgSSiEnMNTynHFH5voUepgeB7RhbXDCK7ZZPwjKAMmBsmJiiJn5kcvT2aKsQuiJrHSzhWmNtJEDZYie9nE7RAz/raw.json'
    );
    let rawTx: RawTransaction;
    try {
        const rawJson = fs.readFileSync(fixturePath, 'utf-8');
        const parsedJson = JSON.parse(rawJson);
        // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—É –∫ –Ω–∞—à–µ–º—É —Ç–∏–ø—É RawTransaction
        rawTx = parsedJson.result ? parsedJson.result : parsedJson;
        rawTx.signature = rawTx.transaction.signatures[0];
        console.log(`‚úÖ Loaded transaction fixture: ${rawTx.signature}`);
    } catch (e) {
        console.error('‚ùå FATAL: Could not load fixture file.', e);
        process.exit(1);
    }

    // 3. –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞
    try {
        const atomicEvents = analyzer.analyze(rawTx);
        console.log(`üìä StateDiffAnalyzer created ${atomicEvents.length} atomic events.`);

        const semanticEvent = await aggregator.aggregate(atomicEvents, rawTx);
        console.log(`üéØ EventAggregator produced a semantic event of type: ${semanticEvent.type}`);

        // 4. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if (semanticEvent.type === 'SWAP') {
            const swap = semanticEvent as SwapEvent;
            console.log(`  Swapper: ${swap.swapper}`);
            console.log(`  Token In: ${swap.tokenIn.amount} of ${swap.tokenIn.mint}`);
            console.log(`  Token Out: ${swap.tokenOut.amount} of ${swap.tokenOut.mint}`);
            console.log('‚úÖ SUCCESS: The core pipeline correctly identified a SWAP event.');
        } else {
            console.error(`‚ùå FAILURE: Expected a SWAP event, but got ${semanticEvent.type}.`);
        }
        // console.log(JSON.stringify(semanticEvent, null, 2)); // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –≤—ã–≤–æ–¥–∞

    } catch (e) {
        console.error('‚ùå FATAL: An error occurred during processing.', e);
        process.exit(1);
    }
}

verifyCore(); 