#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–≤–∫–ª—é—á–∞—è ATA)
"""

from utils.signature_handler import fetch_signatures_for_token
import time
import logging

logging.basicConfig(level=logging.INFO)

TARGET_TOKEN = "AL2HhMQLkJqeeK5w4akoogzyYBZ6GYkBfxjscCf2L2yC"

if __name__ == "__main__":
    print("üß™ –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–≤–∫–ª—é—á–∞—è ATA)")
    print(f"–¢–æ–∫–µ–Ω: {TARGET_TOKEN}")
    start = time.time()
    print("–ó–∞–ø—É—Å–∫ fetch_signatures_for_token... (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç)")
    try:
        signatures = fetch_signatures_for_token(
            token_mint_address=TARGET_TOKEN,
            fetch_limit_per_call=1000,
            total_tx_limit=None,
            direction='e'
        )
        elapsed = time.time() - start
        if signatures is None:
            print("‚ùå –û—à–∏–±–∫–∞: —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ None")
        else:
            count = len(signatures)
            print(f"\n‚úÖ –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞—Ç—É—Ä: {count}")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.1f} —Å–µ–∫—É–Ω–¥")
            if count < 1000:
                print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ RPC –ª–∏–º–∏—Ç—ã –∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã fetch_signatures_for_token.")
            elif count > 2000:
                print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –≤–µ–ª–∏–∫–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã.")
            else:
                print("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤—ã–≥–ª—è–¥–∏—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ.")
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc() 