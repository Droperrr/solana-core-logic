# Этап 1: Используем официальный образ Node.js 18 на легком Alpine Linux
FROM node:18-alpine AS development

# Устанавливаем базовые утилиты, которые понадобятся для работы в контейнере
# git - для версионного контроля, bash - для более удобной оболочки
RUN apk add --no-cache git bash

# Устанавливаем Python 3 и менеджер пакетов pip.
# Это необходимо, чтобы мы могли запускать наши Python E2E-тесты прямо из контейнера.
RUN apk add --no-cache python3 py3-pip

# Устанавливаем рабочую директорию внутри контейнера.
# Все последующие команды будут выполняться из /app.
WORKDIR /app

# Копируем только package.json и package-lock.json.
# Этот шаг кэшируется Docker'ом. Если зависимости не менялись,
# Docker не будет переустанавливать их при каждой сборке, что ускоряет процесс.
COPY package*.json ./

# Устанавливаем ВСЕ зависимости, включая dev-зависимости (typescript, jest, etc.),
# так как это среда для разработки и тестирования.
RUN npm install

# Копируем весь остальной код проекта в рабочую директорию /app.
# Этот слой будет пересобираться при каждом изменении в коде.
COPY . .

# Команда по умолчанию. Она просто держит контейнер запущенным в фоне,
# чтобы мы могли к нему подключаться для выполнения команд (тестов, запуска сервера).
CMD ["tail", "-f", "/dev/null"] 