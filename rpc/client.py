import threading
import time
import logging
import requests
from typing import Optional, Dict, Any, List
import random
from pydantic import BaseModel
import config.config as app_config

# --- Pydantic-–º–æ–¥–µ–ª—å –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ ---
class CanonicalRawTransaction(BaseModel):
    # TODO: –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É Solana JSON-RPC
    raw_json: dict
    rpc_source: str

# --- RateLimiter ---
class RateLimiter:
    """
    –ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏.
    """
    def __init__(self, rate_per_sec: int):
        self.rate_per_sec = max(1, rate_per_sec)
        self.period = 1.0 / self.rate_per_sec
        self.lock = threading.Lock()
        self.last_request_time = 0
        self.logger = logging.getLogger("rpc.ratelimiter")

    def acquire(self):
        with self.lock:
            now = time.monotonic()
            time_since_last = now - self.last_request_time
            if time_since_last < self.period:
                sleep_time = self.period - time_since_last
                self.logger.info(f"Rate limit: sleeping for {sleep_time:.3f} seconds to maintain {self.rate_per_sec} req/s.")
                time.sleep(sleep_time)
            self.last_request_time = time.monotonic()

# --- RPCClient with Enterprise Retry Mechanism ---
class RPCClient:
    # –¢–µ–ø–µ—Ä—å —É –Ω–∞—Å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    PROVIDER_NAME = 'helius'
    BASE_URL = 'https://mainnet.helius-rpc.com'
    
    # Retry configuration
    MAX_RETRIES = 5
    BASE_DELAY = 1.0  # —Å–µ–∫—É–Ω–¥
    MAX_DELAY = 30.0  # —Å–µ–∫—É–Ω–¥
    EXPONENTIAL_BASE = 2

    def __init__(self):
        self.api_keys = [k for k in app_config.HELIUS_API_KEYS if k]
        self.key_index = 0
        self.rate_limiter = RateLimiter(rate_per_sec=9)  # –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç 9 req/s
        self.logger = logging.getLogger("rpc.client.helius")
        if not self.api_keys:
            self.logger.critical("–ö–ª—é—á–∏ Helius API –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏! –ü–∞–π–ø–ª–∞–π–Ω –Ω–µ —Å–º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")

    def _get_next_key(self):
        self.key_index = (self.key_index + 1) % len(self.api_keys)
        return self.api_keys[self.key_index]

    def _exponential_backoff_delay(self, attempt: int) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É —Å exponential backoff –∏ jitter."""
        delay = min(self.BASE_DELAY * (self.EXPONENTIAL_BASE ** attempt), self.MAX_DELAY)
        # –î–æ–±–∞–≤–ª—è–µ–º jitter (¬±20%) –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è thundering herd
        jitter = delay * 0.2 * (random.random() - 0.5)
        return delay + jitter

    def _is_retryable_error(self, error: Exception) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–µ."""
        if isinstance(error, requests.exceptions.ConnectionError):
            return True
        if isinstance(error, requests.exceptions.Timeout):
            return True
        if isinstance(error, requests.exceptions.ChunkedEncodingError):
            return True
        if isinstance(error, requests.exceptions.RequestException):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥—ã –æ—à–∏–±–æ–∫
            if hasattr(error, 'response') and error.response is not None:
                status_code = error.response.status_code
                # Retry –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
                if status_code in [502, 503, 504, 520, 521, 522, 524]:
                    return True
            return True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é retry –¥–ª—è –¥—Ä—É–≥–∏—Ö RequestException
        return False

    def _make_request(self, payload: dict) -> Optional[Any]:
        if not self.api_keys:
            self.logger.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API –∫–ª—é—á–µ–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞")
            return None
        
        method_name = payload.get('method', 'unknown')
        original_key_index = self.key_index
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—Å–µ –∫–ª—é—á–∏ —Å retry logic
        for key_attempt in range(len(self.api_keys)):
            api_key = self.api_keys[self.key_index]
            
            # Retry logic –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–ª—é—á–∞
            for retry_attempt in range(self.MAX_RETRIES):
                self.rate_limiter.acquire()  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤
                url = f"{self.BASE_URL}?api-key={api_key}"
                
                try:
                    resp = requests.post(url, json=payload, timeout=30)
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º rate limit (429) - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á
                    if resp.status_code == 429:
                        self.logger.warning(f"429 Rate limit –¥–ª—è –∫–ª—é—á–∞ {self.key_index+1}/{len(self.api_keys)} –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {method_name}, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á...")
                        break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ retry loop –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª—é—á–∞
                    
                    resp.raise_for_status()
                    json_resp = resp.json()
                    
                    if "error" in json_resp:
                        error_code = json_resp.get('error', {}).get('code', 'unknown')
                        error_message = json_resp.get('error', {}).get('message', 'unknown')
                        self.logger.error(f"RPC Error –æ—Ç Helius –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {method_name}: –∫–æ–¥ {error_code}, —Å–æ–æ–±—â–µ–Ω–∏–µ: {error_message}")
                        return None
                    
                    # –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                    if retry_attempt > 0:
                        self.logger.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å {method_name} —É—Å–ø–µ—à–µ–Ω –ø–æ—Å–ª–µ {retry_attempt} –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫")
                    return json_resp.get('result')
                    
                except requests.RequestException as e:
                    is_retryable = self._is_retryable_error(e)
                    
                    if retry_attempt < self.MAX_RETRIES - 1 and is_retryable:
                        delay = self._exponential_backoff_delay(retry_attempt)
                        self.logger.warning(
                            f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {retry_attempt + 1}/{self.MAX_RETRIES} –¥–ª—è {method_name} –Ω–µ—É–¥–∞—á–Ω–∞: {e}. "
                            f"–ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay:.1f}—Å..."
                        )
                        time.sleep(delay)
                        continue
                    else:
                        # –ò—Å—á–µ—Ä–ø–∞–Ω—ã –ø–æ–ø—ã—Ç–∫–∏ retry –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª—é—á–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ retryable
                        if is_retryable:
                            self.logger.error(
                                f"‚ùå –í—Å–µ {self.MAX_RETRIES} –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è {method_name} —Å –∫–ª—é—á–æ–º {self.key_index+1}/{len(self.api_keys)} –∏—Å—á–µ—Ä–ø–∞–Ω—ã. "
                                f"–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {e}"
                            )
                        else:
                            self.logger.error(f"‚ùå –ù–µ–ø–æ–≤—Ç–æ—Ä—è–µ–º–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {method_name}: {e}")
                        break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ retry loop –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª—é—á–∞
                
                except Exception as e:
                    self.logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {method_name}: {e}")
                    break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ retry loop –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª—é—á–∞
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á
            self._get_next_key()
            
            # –ï—Å–ª–∏ –º—ã –ø—Ä–æ—à–ª–∏ –ø–æ–ª–Ω—ã–π –∫—Ä—É–≥ –ø–æ –≤—Å–µ–º –∫–ª—é—á–∞–º, –≤—ã—Ö–æ–¥–∏–º
            if self.key_index == original_key_index:
                break
        
        self.logger.error(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å {method_name} –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–æ–∫ —Å–æ –≤—Å–µ–º–∏ {len(self.api_keys)} –∫–ª—é—á–∞–º–∏")
        return None

    def get_transaction(self, signature: str) -> Optional[dict]:
        payload = {
            "jsonrpc": "2.0", "id": 1, "method": "getTransaction",
            "params": [signature, {"encoding": "json", "maxSupportedTransactionVersion": 0}]
        }
        result = self._make_request(payload)
        if result:
            result['rpc_source'] = self.PROVIDER_NAME
        return result

    def get_signatures_for_address(self, address: str, limit: int = 1000, before: Optional[str] = None) -> Optional[List[Dict]]:
        params = {"limit": limit}
        if before: params["before"] = before
        payload = {"jsonrpc": "2.0", "id": 1, "method": "getSignaturesForAddress", "params": [address, params]}
        return self._make_request(payload)
    
    def get_program_accounts(self, program_address: str, mint_address: str = None, filters: List[Dict[str, Any]] = None) -> Optional[List[Dict]]:
        """
        Fetch program accounts with optional custom filters. If filters is None, use the legacy behavior (by mint_address at offset 0, dataSize 165).
        """
        if filters is not None:
            config = {
                "encoding": "base64",
                "filters": filters
            }
        else:
            config = {
                "encoding": "jsonParsed",
                "filters": [
                    {"memcmp": {"offset": 0, "bytes": mint_address}},  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: offset 0, –Ω–µ 32
                    {"dataSize": 165}
                ]
            }
        payload = {"jsonrpc": "2.0", "id": 1, "method": "getProgramAccounts", "params": [program_address, config]}
        return self._make_request(payload) 