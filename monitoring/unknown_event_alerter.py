#!/usr/bin/env python3
"""
üö® –°–ò–°–¢–ï–ú–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø –ê–ù–û–ú–ê–õ–¨–ù–´–• –ü–ê–¢–¢–ï–†–ù–û–í (–°–û–ê–ü)
üéØ –ú–æ–¥—É–ª—å: –ê–ª–µ—Ä—Ç–∏–Ω–≥ Unknown Events –≤ –†–µ–∞–ª—å–Ω–æ–º –í—Ä–µ–º–µ–Ω–∏

–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ì–ò–ü–û–¢–ï–ó–ê H-007:
–û—Å–Ω–æ–≤–Ω—ã–º —Ç—Ä–∏–≥–≥–µ—Ä–æ–º —Å–∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —è–≤–ª—è—é—Ç—Å—è –≤—ã–∑–æ–≤—ã –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤,
–∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∫–∞–∫ UNKNOWN. –≠—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ - –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–∞—Å—Ç–æ—è—â–µ–π "–∞–ª—å—Ñ—ã".

–ê–õ–ì–û–†–ò–¢–ú –î–ï–¢–ï–ö–¶–ò–ò:
1. ‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö UNKNOWN —Å–æ–±—ã—Ç–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
2. ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–≤—ã—à–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞
3. ‚úÖ –ö—Ä–æ—Å—Å-—Ç–æ–∫–µ–Ω –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö program_id
4. ‚úÖ –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –±–ª–∏–∑–æ—Å—Ç–∏ –∫ SWAP –æ–ø–µ—Ä–∞—Ü–∏—è–º
5. ‚úÖ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤

–†–ï–ó–£–õ–¨–¢–ê–¢: –ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ "—à—É–º–∞" UNKNOWN –≤ —á–µ—Ç–∫–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
"""

import sqlite3
import json
import hashlib
import time
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Set, Optional
from dataclasses import dataclass
from collections import defaultdict
import logging
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs('logs', exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/unknown_alerter.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

@dataclass
class UnknownEvent:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö UNKNOWN —Å–æ–±—ã—Ç–∏—è."""
    signature: str
    program_id: str
    instruction_name: str
    unknown_classification: str
    unknown_reason: str
    block_time: int
    token_address: Optional[str]
    instruction_index: int
    details: Dict
    fingerprint: str

@dataclass 
class AlertCriteria:
    """–ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ –∞–ª–µ—Ä—Ç–∞."""
    min_program_occurrences: int = 2  # –ú–∏–Ω–∏–º—É–º –≤—Ö–æ–∂–¥–µ–Ω–∏–π program_id –¥–ª—è –∞–ª–µ—Ä—Ç–∞
    time_window_minutes: int = 15     # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
    swap_proximity_minutes: int = 10  # –ë–ª–∏–∑–æ—Å—Ç—å –∫ SWAP –æ–ø–µ—Ä–∞—Ü–∏—è–º
    valid_classifications: Set[str] = None
    
    def __post_init__(self):
        if self.valid_classifications is None:
            self.valid_classifications = {
                'valid_program',
                'defi_related', 
                'nft_related'
            }

class UnknownEventAlerter:
    """
    üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ö–û–ú–ü–û–ù–ï–ù–¢ –°–û–ê–ü
    
    –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç UNKNOWN —Å–æ–±—ã—Ç–∏—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–ª–µ—Ä—Ç—ã –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏
    –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∫—Ä—ã—Ç—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.
    """
    
    def __init__(self, db_path: str = 'solana_db.sqlite'):
        self.db_path = db_path
        self.criteria = AlertCriteria()
        self.last_check_time = None
        self.alert_history = []
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self._initialize_state()
        
    def _initialize_state(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–ª–µ—Ä—Ç–µ—Ä–∞."""
        try:
            with open('monitoring/alerter_state.json', 'r') as f:
                state = json.load(f)
                self.last_check_time = state.get('last_check_time')
        except (FileNotFoundError, json.JSONDecodeError):
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –Ω—É–ª—è - previous state –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.last_check_time = None
    
    def _save_state(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–ª–µ—Ä—Ç–µ—Ä–∞."""
        os.makedirs('monitoring', exist_ok=True)
        
        state = {
            'last_check_time': self.last_check_time,
            'last_save': datetime.now().isoformat()
        }
        
        with open('monitoring/alerter_state.json', 'w') as f:
            json.dump(state, f, indent=2)
    
    def _create_fingerprint(self, program_id: str, instruction_data: Dict) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –¥–ª—è UNKNOWN –æ–ø–µ—Ä–∞—Ü–∏–∏.
        
        –û—Ç–ø–µ—á–∞—Ç–æ–∫ = program_id + —Ö—ç—à –∫–ª—é—á–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É —Ä–∞–∑–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–∞–Ω–Ω—ã—Ö
        key_elements = []
        
        if isinstance(instruction_data, dict):
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–∞–π—Ç data –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'data' in instruction_data:
                data = instruction_data['data']
                if isinstance(data, str) and len(data) > 8:
                    key_elements.append(data[:16])  # –ü–µ—Ä–≤—ã–µ 8 –±–∞–π—Ç –≤ hex
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            if 'accounts' in instruction_data:
                accounts = instruction_data['accounts']
                if isinstance(accounts, list):
                    key_elements.append(f"acc_count:{len(accounts)}")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        fingerprint_str = f"{program_id}|{';'.join(key_elements)}"
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ö—ç—à
        return hashlib.sha256(fingerprint_str.encode()).hexdigest()[:16]
    
    def _get_new_unknown_events(self) -> List[UnknownEvent]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–≤—ã–µ UNKNOWN —Å–æ–±—ã—Ç–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        conn = sqlite3.connect(self.db_path)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä
        if self.last_check_time:
            time_filter = "AND e.created_at > ?"
            params = [self.last_check_time]
        else:
            # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –±–µ—Ä–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
            one_hour_ago = (datetime.now() - timedelta(hours=1)).isoformat()
            time_filter = "AND e.created_at > ?"
            params = [one_hour_ago]
        
        query = f"""
        SELECT 
            e.signature,
            e.program_id,
            e.instruction_name,
            e.unknown_classification,
            e.unknown_reason,
            e.block_time,
            e.token_address,
            e.instruction_index,
            e.details,
            e.created_at
        FROM enhanced_ml_events e
        WHERE e.event_type = 'UNKNOWN'
        {time_filter}
        ORDER BY e.created_at DESC
        """
        
        cursor = conn.cursor()
        cursor.execute(query, params)
        rows = cursor.fetchall()
        conn.close()
        
        events = []
        for row in rows:
            details = json.loads(row[8]) if row[8] else {}
            
            event = UnknownEvent(
                signature=row[0],
                program_id=row[1],
                instruction_name=row[2],
                unknown_classification=row[3],
                unknown_reason=row[4],
                block_time=row[5],
                token_address=row[6],
                instruction_index=row[7],
                details=details,
                fingerprint=self._create_fingerprint(row[1], details)
            )
            events.append(event)
        
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(events)} –Ω–æ–≤—ã—Ö UNKNOWN —Å–æ–±—ã—Ç–∏–π")
        return events
    
    def _analyze_cross_token_patterns(self, events: List[UnknownEvent]) -> Dict[str, List[UnknownEvent]]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã UNKNOWN —Å–æ–±—ã—Ç–∏–π –º–µ–∂–¥—É —Ç–æ–∫–µ–Ω–∞–º–∏.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å: fingerprint -> —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π —Å —ç—Ç–∏–º –æ—Ç–ø–µ—á–∞—Ç–∫–æ–º
        """
        fingerprint_groups = defaultdict(list)
        
        for event in events:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            if event.unknown_classification in self.criteria.valid_classifications:
                fingerprint_groups[event.fingerprint].append(event)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –≥—Ä—É–ø–ø—ã —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–π
        significant_patterns = {
            fp: events_list 
            for fp, events_list in fingerprint_groups.items()
            if len(events_list) >= self.criteria.min_program_occurrences
        }
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(significant_patterns)} –∑–Ω–∞—á–∏–º—ã—Ö –∫—Ä–æ—Å—Å-—Ç–æ–∫–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
        return significant_patterns
    
    def _check_swap_proximity(self, unknown_event: UnknownEvent) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª –ª–∏ SWAP –±–ª–∏–∑–∫–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∫ UNKNOWN —Å–æ–±—ã—Ç–∏—é.
        """
        conn = sqlite3.connect(self.db_path)
        
        # –ò—â–µ–º SWAP —Å–æ–±—ã—Ç–∏—è –≤ —Ç–æ–º –∂–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–∫–Ω–µ
        time_start = unknown_event.block_time - (self.criteria.swap_proximity_minutes * 60)
        time_end = unknown_event.block_time + (self.criteria.swap_proximity_minutes * 60)
        
        query = """
        SELECT COUNT(*)
        FROM enhanced_ml_events e
        WHERE e.event_type = 'SWAP'
        AND e.block_time BETWEEN ? AND ?
        AND (e.token_address = ? OR e.signature = ?)
        """
        
        cursor = conn.cursor()
        cursor.execute(query, [time_start, time_end, unknown_event.token_address, unknown_event.signature])
        swap_count = cursor.fetchone()[0]
        conn.close()
        
        return swap_count > 0
    
    def _generate_alert(self, pattern_fingerprint: str, events: List[UnknownEvent]) -> Dict:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–ª–µ—Ä—Ç –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞.
        """
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–µ
        tokens_involved = set(e.token_address for e in events if e.token_address)
        programs_involved = set(e.program_id for e in events)
        time_span = max(e.block_time for e in events) - min(e.block_time for e in events)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Å –±–ª–∏–∑–∫–∏–º–∏ SWAP
        swap_correlated_count = sum(1 for e in events if self._check_swap_proximity(e))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å –∞–ª–µ—Ä—Ç–∞
        criticality = "HIGH" if swap_correlated_count >= 2 else "MEDIUM"
        if len(tokens_involved) >= 3 and swap_correlated_count >= 3:
            criticality = "CRITICAL"
        
        alert = {
            "alert_id": f"UNKNOWN_{pattern_fingerprint}_{int(time.time())}",
            "timestamp": datetime.now().isoformat(),
            "criticality": criticality,
            "pattern_fingerprint": pattern_fingerprint,
            "hypothesis": "H-007: –°–∫—Ä—ã—Ç—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –≤ UNKNOWN –æ–ø–µ—Ä–∞—Ü–∏–∏",
            "summary": {
                "events_count": len(events),
                "tokens_involved": len(tokens_involved),
                "programs_involved": list(programs_involved),
                "time_span_minutes": time_span // 60,
                "swap_correlated_events": swap_correlated_count
            },
            "events": [
                {
                    "signature": e.signature,
                    "program_id": e.program_id,
                    "token": e.token_address,
                    "block_time": e.block_time,
                    "classification": e.unknown_classification,
                    "has_swap_proximity": self._check_swap_proximity(e)
                }
                for e in events
            ],
            "recommended_action": self._get_recommended_action(criticality, events),
            "solana_explorer_links": [
                f"https://solscan.io/tx/{e.signature}" for e in events
            ]
        }
        
        return alert
    
    def _get_recommended_action(self, criticality: str, events: List[UnknownEvent]) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏."""
        if criticality == "CRITICAL":
            return (
                "üö® –ù–ï–ú–ï–î–õ–ï–ù–ù–û: –†—É—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π. "
                "–í–æ–∑–º–æ–∂–µ–Ω —Å–∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤. "
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –≤–æ–∑–º–æ–∂–Ω—ã–º –¥–≤–∏–∂–µ–Ω–∏—è–º."
            )
        elif criticality == "HIGH":
            return (
                "‚ö†Ô∏è –ü–†–ò–û–†–ò–¢–ï–¢: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ program_id –∏ –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π. "
                "–°—Ä–∞–≤–Ω–∏—Ç—å —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–º–ø–∞–º–∏. –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è."
            )
        else:
            return (
                "üìã –°–¢–ê–ù–î–ê–†–¢: –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. "
                "–î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤."
            )
    
    def _send_alert(self, alert: Dict):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Ñ–∞–π–ª).
        –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å Telegram, email, Discord –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é.
        """
        alert_msg = (
            f"\nüö® –°–û–ê–ü –ê–õ–ï–†–¢: {alert['criticality']}\n"
            f"üìä –ü–∞—Ç—Ç–µ—Ä–Ω: {alert['pattern_fingerprint']}\n"
            f"üéØ –°–æ–±—ã—Ç–∏—è: {alert['summary']['events_count']} —É {alert['summary']['tokens_involved']} —Ç–æ–∫–µ–Ω–æ–≤\n"
            f"‚è±Ô∏è –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {alert['summary']['time_span_minutes']} –º–∏–Ω—É—Ç\n"
            f"üí± SWAP –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π: {alert['summary']['swap_correlated_events']}\n"
            f"üîó –ü—Ä–æ–≥—Ä–∞–º–º—ã: {', '.join(alert['summary']['programs_involved'])}\n"
            f"üí° –î–µ–π—Å—Ç–≤–∏–µ: {alert['recommended_action']}\n"
        )
        
        logger.warning(alert_msg)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–ª–µ—Ä—Ç –≤ —Ñ–∞–π–ª
        os.makedirs('monitoring/alerts', exist_ok=True)
        
        alert_file = f"monitoring/alerts/alert_{alert['alert_id']}.json"
        with open(alert_file, 'w') as f:
            json.dump(alert, f, indent=2)
        
        self.alert_history.append(alert)
        logger.info(f"üíæ –ê–ª–µ—Ä—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {alert_file}")
    
    def run_scan(self) -> Dict:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è UNKNOWN —Å–æ–±—ã—Ç–∏–π.
        """
        scan_start = datetime.now()
        logger.info(f"üîç –°–û–ê–ü: –ù–∞—á–∞–ª–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ {scan_start}")
        
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ UNKNOWN —Å–æ–±—ã—Ç–∏—è
            unknown_events = self._get_new_unknown_events()
            
            if not unknown_events:
                logger.info("‚úÖ –ù–æ–≤—ã–µ UNKNOWN —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                self._save_state()
                return {"status": "success", "events_found": 0, "alerts_generated": 0}
            
            # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—Ä–æ—Å—Å-—Ç–æ–∫–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            significant_patterns = self._analyze_cross_token_patterns(unknown_events)
            
            alerts_generated = 0
            
            # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç—ã –¥–ª—è –∑–Ω–∞—á–∏–º—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            for fingerprint, pattern_events in significant_patterns.items():
                alert = self._generate_alert(fingerprint, pattern_events)
                self._send_alert(alert)
                alerts_generated += 1
            
            # 4. –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            self.last_check_time = scan_start.isoformat()
            self._save_state()
            
            scan_result = {
                "status": "success",
                "scan_time": scan_start.isoformat(),
                "events_found": len(unknown_events),
                "patterns_detected": len(significant_patterns),
                "alerts_generated": alerts_generated,
                "scan_duration_seconds": (datetime.now() - scan_start).total_seconds()
            }
            
            logger.info(f"‚úÖ –°–û–ê–ü: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - {scan_result}")
            return scan_result
            
        except Exception as e:
            logger.error(f"‚ùå –°–û–ê–ü: –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - {e}")
            import traceback
            traceback.print_exc()
            return {"status": "error", "error": str(e)}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–ª–µ—Ä—Ç–µ—Ä–∞."""
    print("üö® –°–û–ê–ü: –°–∏—Å—Ç–µ–º–∞ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ê–Ω–æ–º–∞–ª—å–Ω—ã—Ö –ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
    print("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Unknown Event Alerter...")
    
    alerter = UnknownEventAlerter()
    result = alerter.run_scan()
    
    if result["status"] == "success":
        print(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ:")
        print(f"   üìä –°–æ–±—ã—Ç–∏—è: {result['events_found']}")
        print(f"   üîç –ü–∞—Ç—Ç–µ—Ä–Ω—ã: {result['patterns_detected']}")
        print(f"   üö® –ê–ª–µ—Ä—Ç—ã: {result['alerts_generated']}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {result.get('error', 'Unknown error')}")

if __name__ == "__main__":
    main() 