#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è 014: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü –∏ –ø–æ–ª–µ–π –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
"""

import sqlite3
import sys
import logging

logger = logging.getLogger("migration_014")

def upgrade(conn):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç/–¥–æ–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
    """
    cursor = conn.cursor()
    
    print("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ 014: –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É token_lifecycle
    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã token_lifecycle...")
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS token_lifecycle (
            token_address TEXT PRIMARY KEY,
            creation_signature TEXT,
            creation_time INTEGER,
            first_dump_signature TEXT,
            first_dump_time INTEGER,
            first_dump_price_drop_percent REAL,
            last_processed_signature TEXT
        );
    """)
    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ token_lifecycle –≥–æ—Ç–æ–≤–∞")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É token_collection_progress
    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã token_collection_progress...")
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS token_collection_progress (
            token_address TEXT PRIMARY KEY,
            on_chain_tx_count INTEGER,
            db_tx_count INTEGER,
            completeness_ratio REAL,
            status TEXT DEFAULT 'unknown',
            last_checked_at INTEGER,
            last_collection_at INTEGER,
            error_message TEXT,
            created_at INTEGER DEFAULT (strftime('%s', 'now')),
            updated_at INTEGER DEFAULT (strftime('%s', 'now'))
        );
    """)
    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ token_collection_progress –≥–æ—Ç–æ–≤–∞")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É group_task_status
    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã group_task_status...")
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS group_task_status (
            group_name TEXT PRIMARY KEY,
            status TEXT NOT NULL,
            updated_at INTEGER NOT NULL
        );
    """)
    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ group_task_status –≥–æ—Ç–æ–≤–∞")
    
    # 4. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    print("üîó –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...")
    
    # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è token_collection_progress
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_progress_status ON token_collection_progress(status);")
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_progress_last_checked ON token_collection_progress(last_checked_at);")
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_progress_completeness ON token_collection_progress(completeness_ratio);")
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_progress_updated ON token_collection_progress(updated_at);")
    
    # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è token_lifecycle
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_lifecycle_dump_time ON token_lifecycle(first_dump_time);")
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_lifecycle_creation_time ON token_lifecycle(creation_time);")
    
    # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è group_task_status
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_group_status ON group_task_status(status);")
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_group_updated ON group_task_status(updated_at);")
    
    print("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
    
    # 5. –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at –≤ token_collection_progress
    print("‚ö° –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤...")
    cursor.execute("""
        CREATE TRIGGER IF NOT EXISTS update_token_progress_timestamp 
        AFTER UPDATE ON token_collection_progress
        BEGIN
            UPDATE token_collection_progress 
            SET updated_at = strftime('%s', 'now') 
            WHERE token_address = NEW.token_address;
        END;
    """)
    print("‚úÖ –¢—Ä–∏–≥–≥–µ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã")
    
    # 6. –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º WAL –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    print("üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–∞ WAL...")
    cursor.execute("PRAGMA journal_mode=WAL;")
    result = cursor.fetchone()
    print(f"‚úÖ –†–µ–∂–∏–º –∂—É—Ä–Ω–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è: {result[0] if result else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
    
    # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    print("\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü:")
    
    tables = ['token_lifecycle', 'token_collection_progress', 'group_task_status']
    for table in tables:
        cursor.execute(f"SELECT COUNT(*) FROM {table}")
        count = cursor.fetchone()[0]
        print(f"  - {table}: {count} –∑–∞–ø–∏—Å–µ–π")
    
    conn.commit()
    print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è 014 —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!")

def downgrade(conn):
    """
    –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ (—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
    """
    cursor = conn.cursor()
    
    print("üîÑ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ 014...")
    
    # –£–¥–∞–ª—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã
    cursor.execute("DROP TRIGGER IF EXISTS update_token_progress_timestamp;")
    
    # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
    indexes = [
        'idx_progress_status', 'idx_progress_last_checked', 'idx_progress_completeness', 'idx_progress_updated',
        'idx_lifecycle_dump_time', 'idx_lifecycle_creation_time',
        'idx_group_status', 'idx_group_updated'
    ]
    
    for index in indexes:
        cursor.execute(f"DROP INDEX IF EXISTS {index};")
    
    # –í–ù–ò–ú–ê–ù–ò–ï: –¢–∞–±–ª–∏—Ü—ã –ù–ï —É–¥–∞–ª—è–µ–º, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (—Å–æ–¥–µ—Ä–∂–∞—Ç –¥–∞–Ω–Ω—ã–µ)")
    
    conn.commit()
    print("‚úÖ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ 014 –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    
    # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = sys.argv[1] if len(sys.argv) > 1 else "db/solana_db.sqlite"
    print(f"üéØ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫: {db_path}")
    
    try:
        conn = sqlite3.connect(db_path)
        upgrade(conn)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ 014: {e}")
        raise
    finally:
        if 'conn' in locals():
            conn.close() 