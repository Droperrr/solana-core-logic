import re
from typing import List, Dict, Optional

def parse_hypotheses_md(file_path: str = "analysis/hypotheses.md") -> List[Dict]:
    """
    –ü–∞—Ä—Å–∏—Ç Markdown-—Ñ–∞–π–ª —Å –≥–∏–ø–æ—Ç–µ–∑–∞–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π.
    –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞ hypotheses.md
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
    except FileNotFoundError:
        return []

    hypotheses = []
    
    # –ò—â–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å ID
    # –í–∞—Ä–∏–∞–Ω—Ç—ã: ### **ID:** H-005, ### **ID: H-001**, ### **ID: H-007 (...)**
    id_patterns = [
        r'### \*\*ID:\*\* (H-\d+)',          # ### **ID:** H-005
        r'### \*\*ID: (H-\d+)',              # ### **ID: H-007 (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç...)
    ]
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º —Å ID
    sections = []
    for pattern in id_patterns:
        matches = list(re.finditer(pattern, content))
        for match in matches:
            start = match.start()
            # –ù–∞–π–¥–µ–º –∫–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–∏ (—Å–ª–µ–¥—É—é—â–∏–π ### –∏–ª–∏ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞)
            next_section = re.search(r'\n### ', content[start + 1:])
            if next_section:
                end = start + 1 + next_section.start()
                section_content = content[start:end]
            else:
                section_content = content[start:]
            
            sections.append((match.group(1), section_content))
    
    # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é —Å–µ–∫—Ü–∏—é
    for hypothesis_id, section in sections:
        hypothesis = {
            'id': hypothesis_id,
            'title': '',
            'description': '',
            'status': ''
        }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ (–∏—â–µ–º –ø–æ—Å–ª–µ **–ù–∞–∑–≤–∞–Ω–∏–µ:** –∏–ª–∏ —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ ID)
        title_patterns = [
            r'\*\*–ù–∞–∑–≤–∞–Ω–∏–µ:\*\*\s*([^\n]+)',     # **–ù–∞–∑–≤–∞–Ω–∏–µ:** ...
        ]
        
        for pattern in title_patterns:
            title_match = re.search(pattern, section)
            if title_match:
                hypothesis['title'] = title_match.group(1).strip()
                break
        
        # –ï—Å–ª–∏ **–ù–∞–∑–≤–∞–Ω–∏–µ:** –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –≤ —Å—Ç—Ä–æ–∫–µ —Å ID
        if not hypothesis['title']:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å ID
            lines = section.split('\n')
            for line in lines[:5]:  # –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ —Å–µ–∫—Ü–∏–∏
                if hypothesis_id in line:
                    # –£–±–∏—Ä–∞–µ–º ID –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                    line_clean = re.sub(r'### \*\*ID[:\*]*\*\*?\s*H-\d+\s*', '', line)
                    line_clean = re.sub(r'\(–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:[^)]*\)', '', line_clean)  # –£–±–∏—Ä–∞–µ–º (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ...)
                    line_clean = re.sub(r'[‚≠êüî•üö®‚úÖ‚ùåüî¨üîÑ‚ö°]+\s*', '', line_clean)  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
                    line_clean = re.sub(r'\*\*([^*]+)\*\*', r'\1', line_clean)  # –£–±–∏—Ä–∞–µ–º ** –≤–æ–∫—Ä—É–≥ —Ç–µ–∫—Å—Ç–∞
                    title = line_clean.strip()
                    
                    # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    exclude_terms = ['–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê', '–ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø', '–û–ü–†–û–í–ï–†–ì–ù–£–¢–ê', '–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô', '–ö –ø—Ä–æ–≤–µ—Ä–∫–µ', '–í –ø—Ä–æ—Ü–µ—Å—Å–µ']
                    if title and len(title) > 3 and not any(term in title for term in exclude_terms):
                        hypothesis['title'] = title
                        break
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ  
        desc_patterns = [
            r'\*\*–û–ø–∏—Å–∞–Ω–∏–µ:\*\*\s*(.*?)(?=\n\*\*|$)',               # **–û–ø–∏—Å–∞–Ω–∏–µ:** ...
            r'\*\*–û–ø–∏—Å–∞–Ω–∏–µ\*\*[:\s]*(.*?)(?=\n\*\*|$)',             # **–û–ø–∏—Å–∞–Ω–∏–µ** ...
            r'(?<=\n\n)((?!.*\*\*)[^\n]+(?:\n(?!.*\*\*)[^\n]+)*)', # –ê–±–∑–∞—Ü –±–µ–∑ ** –º–∞—Ä–∫–µ—Ä–æ–≤
        ]
        
        for pattern in desc_patterns:
            desc_match = re.search(pattern, section, re.DOTALL)
            if desc_match:
                description = desc_match.group(1).strip()
                # –û—á–∏—â–∞–µ–º –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
                description = re.sub(r'\s+', ' ', description)
                if len(description) > 20:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è
                    hypothesis['description'] = description
                    break
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å (—Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)
        status_patterns = [
            r'\*\*–°—Ç–∞—Ç—É—Å:\*\*\s*([^\n]+)',           # **–°—Ç–∞—Ç—É—Å:** ‚úÖ **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê**
            r'‚úÖ\s*\*\*([^*]+)\*\*',                  # ‚úÖ **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê**
            r'‚ùå\s*\*\*([^*]+)\*\*',                  # ‚ùå **–û–ü–†–û–í–ï–†–ì–ù–£–¢–ê** 
            r'üî¨\s*([^\n]+)',                         # üî¨ –ö –ø—Ä–æ–≤–µ—Ä–∫–µ
            r'üîÑ\s*([^\n]+)',                         # üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            r'‚ö°\s*([^\n]+)',                         # ‚ö° **–ü–†–û–í–ï–†–Ø–ï–¢–°–Ø**
        ]
        
        for pattern in status_patterns:
            status_match = re.search(pattern, section)
            if status_match:
                status = status_match.group(1).strip()
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∑–≤–µ–∑–¥–æ—á–∫–∏
                status = re.sub(r'\*\*', '', status)
                hypothesis['status'] = status
                break
        
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        if not hypothesis['status']:
            if '‚úÖ' in section[:200]:
                hypothesis['status'] = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞'
            elif '‚ùå' in section[:200]:
                hypothesis['status'] = '–û–ø—Ä–æ–≤–µ—Ä–≥–Ω—É—Ç–∞'
            elif 'üî¨' in section[:200]:
                hypothesis['status'] = '–ö –ø—Ä–æ–≤–µ—Ä–∫–µ'
            elif 'üîÑ' in section[:200]:
                hypothesis['status'] = '–í –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏'
            elif '‚ö°' in section[:200]:
                hypothesis['status'] = '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è'
            else:
                hypothesis['status'] = '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if hypothesis['id'] and (hypothesis['title'] or hypothesis['description']):
            hypotheses.append(hypothesis)

    return hypotheses 