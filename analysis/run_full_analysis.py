#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞: –ø–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –¥–∞–º–ø–∞–º–∏.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—á–∫–æ–π –≤—Ö–æ–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–æ–≤.
–û–Ω –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç:
1. –ü–æ–∏—Å–∫ "–≥–æ—Ä—è—á–∏—Ö" –º–∏–Ω—É—Ç —Å –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
2. –ü–æ–∏—Å–∫ –¥–∞–º–ø–æ–≤ —Ü–µ–Ω—ã
3. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python analysis/run_full_analysis.py --token <TOKEN_ADDRESS>
"""

import argparse
import logging
import sys
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append('.')

from analysis.find_coordinated_activity import find_coordinated_activity
from analysis.dump_detector import DumpDetector
from db.db_manager import get_connection

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

def analyze_token_correlation(token_address: str, 
                            activity_window_minutes: int = 60,
                            dump_threshold_percent: float = 10.0,
                            correlation_window_hours: int = 24) -> Dict:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞: –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å + –¥–∞–º–ø—ã + –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è.
    
    Args:
        token_address: –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        activity_window_minutes: –û–∫–Ω–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–º–∏–Ω—É—Ç—ã)
        dump_threshold_percent: –ü–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞–º–ø–∞ (%)
        correlation_window_hours: –û–∫–Ω–æ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (—á–∞—Å—ã)
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
    """
    logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞: {token_address}")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        conn = get_connection()
        
        # –®–∞–≥ 1: –ü–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        logger.info("üìä –®–∞–≥ 1: –ü–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...")
        activity_results = find_coordinated_activity(
            conn=conn,
            threshold=3  # –ú–∏–Ω–∏–º—É–º 3 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –º–∏–Ω—É—Ç—É
        )
        
        if not activity_results:
            logger.warning("‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return {
                "token_address": token_address,
                "analysis_timestamp": datetime.now().isoformat(),
                "coordinated_activity": None,
                "dumps": None,
                "correlation": None,
                "status": "no_activity_found"
            }
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ—Ä—Ç–µ–∂–∏ –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
        activity_dicts = []
        for minute, tx_count in activity_results:
            # –ü–∞—Ä—Å–∏–º –º–∏–Ω—É—Ç—É –≤ timestamp
            dt = datetime.strptime(minute, '%Y-%m-%d %H:%M')
            timestamp = int(dt.timestamp())
            
            activity_dicts.append({
                "timestamp": timestamp,
                "minute": minute,
                "transaction_count": tx_count,
                "unique_wallets": 0  # –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
            })
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(activity_dicts)} –ø–µ—Ä–∏–æ–¥–æ–≤ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        
        # –®–∞–≥ 2: –ü–æ–∏—Å–∫ –¥–∞–º–ø–æ–≤
        logger.info("üìâ –®–∞–≥ 2: –ü–æ–∏—Å–∫ –¥–∞–º–ø–æ–≤ —Ü–µ–Ω—ã...")
        dump_detector = DumpDetector()
        dump_results = dump_detector.find_dumps_for_token(
            token_address=token_address,
            threshold_percent=dump_threshold_percent,
            conn=conn
        )
        
        if not dump_results:
            logger.warning("‚ùå –î–∞–º–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return {
                "token_address": token_address,
                "analysis_timestamp": datetime.now().isoformat(),
                "coordinated_activity": activity_dicts,
                "dumps": None,
                "correlation": None,
                "status": "no_dumps_found"
            }
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(dump_results)} –¥–∞–º–ø–æ–≤")
        
        # –®–∞–≥ 3: –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        logger.info("üîç –®–∞–≥ 3: –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")
        correlation_results = analyze_correlation(
            activity_results=activity_dicts,
            dump_results=dump_results,
            correlation_window_hours=correlation_window_hours
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        final_report = {
            "token_address": token_address,
            "analysis_timestamp": datetime.now().isoformat(),
            "parameters": {
                "activity_window_minutes": activity_window_minutes,
                "dump_threshold_percent": dump_threshold_percent,
                "correlation_window_hours": correlation_window_hours
            },
            "coordinated_activity": {
                "total_periods": len(activity_dicts),
                "periods": activity_dicts
            },
            "dumps": {
                "total_dumps": len(dump_results),
                "dumps": dump_results
            },
            "correlation": correlation_results,
            "status": "success"
        }
        
        logger.info("‚úÖ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return final_report
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–∫–µ–Ω–∞ {token_address}: {e}", exc_info=True)
        return {
            "token_address": token_address,
            "analysis_timestamp": datetime.now().isoformat(),
            "error": str(e),
            "status": "error"
        }
    finally:
        if 'conn' in locals():
            conn.close()

def analyze_correlation(activity_results: List[Dict], 
                       dump_results: List[Dict],
                       correlation_window_hours: int) -> Dict:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –º–µ–∂–¥—É –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∏ –¥–∞–º–ø–∞–º–∏.
    
    Args:
        activity_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        dump_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–∞–º–ø–æ–≤
        correlation_window_hours: –û–∫–Ω–æ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –≤ —á–∞—Å–∞—Ö
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    """
    logger.info("üîç –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∏ –¥–∞–º–ø–∞–º–∏...")
    
    correlations = []
    correlation_window = timedelta(hours=correlation_window_hours)
    
    for dump in dump_results:
        dump_time = datetime.fromtimestamp(dump['timestamp'])
        
        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –æ–∫–Ω–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ø–µ—Ä–µ–¥ –¥–∞–º–ø–æ–º
        related_activities = []
        for activity in activity_results:
            activity_time = datetime.fromtimestamp(activity['timestamp'])
            time_diff = dump_time - activity_time
            
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –æ–∫–Ω–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∏ –¥–æ –¥–∞–º–ø–∞
            if timedelta(0) <= time_diff <= correlation_window:
                related_activities.append({
                    "activity": activity,
                    "time_before_dump_hours": time_diff.total_seconds() / 3600
                })
        
        if related_activities:
            correlations.append({
                "dump": dump,
                "related_activities": related_activities,
                "activity_count": len(related_activities)
            })
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_dumps = len(dump_results)
    dumps_with_activity = len(correlations)
    correlation_rate = (dumps_with_activity / total_dumps * 100) if total_dumps > 0 else 0
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
    suspicious_cases = []
    for corr in correlations:
        if corr['activity_count'] >= 2:  # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            suspicious_cases.append(corr)
    
    return {
        "total_dumps": total_dumps,
        "dumps_with_activity": dumps_with_activity,
        "correlation_rate_percent": round(correlation_rate, 2),
        "suspicious_cases_count": len(suspicious_cases),
        "correlations": correlations,
        "suspicious_cases": suspicious_cases
    }

def print_analysis_report(report: Dict):
    """
    –í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∞–Ω–∞–ª–∏–∑–∞.
    """
    print("\n" + "="*80)
    print(f"üìä –û–¢–ß–ï–¢ –ü–û –ê–ù–ê–õ–ò–ó–£ –¢–û–ö–ï–ù–ê: {report['token_address']}")
    print("="*80)
    
    if report['status'] == 'error':
        print(f"‚ùå –û–®–ò–ë–ö–ê: {report.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        return
    
    if report['status'] in ['no_activity_found', 'no_dumps_found']:
        print(f"‚ö†Ô∏è  {report['status'].replace('_', ' ').title()}")
        return
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
    params = report['parameters']
    print(f"üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞:")
    print(f"   ‚Ä¢ –û–∫–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {params['activity_window_minutes']} –º–∏–Ω")
    print(f"   ‚Ä¢ –ü–æ—Ä–æ–≥ –¥–∞–º–ø–∞: {params['dump_threshold_percent']}%")
    print(f"   ‚Ä¢ –û–∫–Ω–æ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {params['correlation_window_hours']} —á")
    
    # –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    activity = report['coordinated_activity']
    print(f"\nüìà –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –ø–µ—Ä–∏–æ–¥–æ–≤: {activity['total_periods']}")
    
    if activity['periods']:
        print(f"   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø–µ—Ä–∏–æ–¥–∞:")
        for i, period in enumerate(activity['periods'][:3]):
            timestamp = datetime.fromtimestamp(period['timestamp']).strftime('%Y-%m-%d %H:%M:%S')
            print(f"     {i+1}. {timestamp} - {period['transaction_count']} tx, {period['unique_wallets']} –∫–æ—à–µ–ª—å–∫–æ–≤")
    
    # –î–∞–º–ø—ã
    dumps = report['dumps']
    print(f"\nüìâ –î–∞–º–ø—ã —Ü–µ–Ω—ã:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –¥–∞–º–ø–æ–≤: {dumps['total_dumps']}")
    
    if dumps['dumps']:
        print(f"   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–∞–º–ø–∞:")
        for i, dump in enumerate(dumps['dumps'][:3]):
            timestamp = datetime.fromtimestamp(dump['timestamp']).strftime('%Y-%m-%d %H:%M:%S')
            print(f"     {i+1}. {timestamp} - –ø–∞–¥–µ–Ω–∏–µ –Ω–∞ {dump['price_drop_percent']:.1f}%")
    
    # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è
    correlation = report['correlation']
    print(f"\nüîç –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑:")
    print(f"   ‚Ä¢ –î–∞–º–ø–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é: {correlation['dumps_with_activity']}/{correlation['total_dumps']}")
    print(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {correlation['correlation_rate_percent']}%")
    print(f"   ‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤: {correlation['suspicious_cases_count']}")
    
    if correlation['suspicious_cases']:
        print(f"\nüö® –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ï –°–õ–£–ß–ê–ò:")
        for i, case in enumerate(correlation['suspicious_cases'][:5]):
            dump = case['dump']
            dump_time = datetime.fromtimestamp(dump['timestamp']).strftime('%Y-%m-%d %H:%M:%S')
            print(f"   {i+1}. –î–∞–º–ø {dump_time} (-{dump['price_drop_percent']:.1f}%)")
            print(f"      –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {case['activity_count']} –ø–µ—Ä–∏–æ–¥–æ–≤")
            for act in case['related_activities'][:2]:
                act_time = datetime.fromtimestamp(act['activity']['timestamp']).strftime('%H:%M:%S')
                hours_before = act['time_before_dump_hours']
                print(f"      ‚Ä¢ {act_time} ({hours_before:.1f}—á –¥–æ –¥–∞–º–ø–∞)")
    
    print("\n" + "="*80)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(description='–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞: –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å + –¥–∞–º–ø—ã + –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è')
    parser.add_argument('--token', required=True, help='–ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
    parser.add_argument('--activity-window', type=int, default=60, 
                       help='–û–∫–Ω–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–º–∏–Ω—É—Ç—ã, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 60)')
    parser.add_argument('--dump-threshold', type=float, default=10.0,
                       help='–ü–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞–º–ø–∞ (%, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10.0)')
    parser.add_argument('--correlation-window', type=int, default=24,
                       help='–û–∫–Ω–æ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (—á–∞—Å—ã, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 24)')
    parser.add_argument('--verbose', '-v', action='store_true', help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_level = logging.DEBUG if args.verbose else logging.INFO
    logging.basicConfig(
        level=log_level,
        format='%(asctime)s | %(levelname)s | %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
    report = analyze_token_correlation(
        token_address=args.token,
        activity_window_minutes=args.activity_window,
        dump_threshold_percent=args.dump_threshold,
        correlation_window_hours=args.correlation_window
    )
    
    # –í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞
    print_analysis_report(report)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    if report['status'] == 'error':
        sys.exit(1)
    elif report['status'] in ['no_activity_found', 'no_dumps_found']:
        sys.exit(2)
    else:
        sys.exit(0)

if __name__ == '__main__':
    main() 