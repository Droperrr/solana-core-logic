#!/usr/bin/env python3
"""
üìä –ö–†–û–°–°-–¢–û–ö–ï–ù –ê–ù–ê–õ–ò–ó–ê–¢–û–† UNKNOWN –°–û–ë–´–¢–ò–ô
üéØ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –°–û–ê–ü –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ì–∏–ø–æ—Ç–µ–∑—ã H-007

–ê–õ–ì–û–†–ò–¢–ú –ê–ù–ê–õ–ò–ó–ê:
1. ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö UNKNOWN —Å–æ–±—ã—Ç–∏–π –ø–æ —Ç–æ–∫–µ–Ω–∞–º
2. ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ "–æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤" –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å—Ö–æ–∂–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π  
3. ‚úÖ –ü–æ–∏—Å–∫ –∫—Ä–æ—Å—Å-—Ç–æ–∫–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –æ—Ç–ø–µ—á–∞—Ç–∫–∏ —É —Ä–∞–∑–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤)
4. ‚úÖ –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å –¥–∞–º–ø–∞–º–∏
5. ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
6. ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ —Å —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤

–¶–ï–õ–¨: –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å UNKNOWN "—à—É–º" –≤ —Ç–æ—á–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
"""

import sqlite3
import json
import hashlib
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Set, Optional
from dataclasses import dataclass
from collections import defaultdict, Counter
import logging
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

@dataclass
class UnknownEventFingerprint:
    """–û—Ç–ø–µ—á–∞—Ç–æ–∫ UNKNOWN —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫—Ä–æ—Å—Å-—Ç–æ–∫–µ–Ω –∞–Ω–∞–ª–∏–∑–∞."""
    fingerprint: str
    program_id: str
    instruction_pattern: str
    data_hash: str
    account_count: int
    classification: str

@dataclass
class CrossTokenPattern:
    """–ü–∞—Ç—Ç–µ—Ä–Ω, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π —É –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤."""
    fingerprint: str
    tokens_count: int
    total_occurrences: int
    time_span_hours: float
    tokens_involved: List[str]
    program_ids: Set[str]
    example_signatures: List[str]
    dump_correlations: int
    statistical_significance: float

@dataclass
class DumpEvent:
    """–°–æ–±—ã—Ç–∏–µ –¥–∞–º–ø–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
    token_address: str
    dump_start_time: int
    price_drop_percent: float
    volume_spike_factor: float
    dump_duration_minutes: int

class CrossTokenUnknownAnalyzer:
    """
    üîç –ö–†–û–°–°-–¢–û–ö–ï–ù –ê–ù–ê–õ–ò–ó–ê–¢–û–† UNKNOWN –û–ü–ï–†–ê–¶–ò–ô
    
    –ò—â–µ—Ç —Å–∫—Ä—ã—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ UNKNOWN —Å–æ–±—ã—Ç–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–ª—É–∂–∏—Ç—å
    —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–∞–º.
    """
    
    def __init__(self, db_path: str = 'solana_db.sqlite'):
        self.db_path = db_path
        self.unknown_events = []
        self.cross_token_patterns = []
        self.dump_events = []
        
    def _create_advanced_fingerprint(self, event_data: Dict) -> UnknownEventFingerprint:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫ UNKNOWN —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ç–æ—á–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏.
        """
        program_id = event_data.get('program_id', 'unknown')
        details = event_data.get('details', {})
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        data = details.get('data', '')
        accounts = details.get('accounts', [])
        instruction_name = event_data.get('instruction_name', 'unknown')
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        if isinstance(data, str) and len(data) > 8:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 16 —Å–∏–º–≤–æ–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö + –ø–∞—Ç—Ç–µ—Ä–Ω —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            data_prefix = data[:16]
            data_length_class = "short" if len(data) < 50 else "medium" if len(data) < 200 else "long"
            instruction_pattern = f"{instruction_name}_{data_length_class}_{data_prefix}"
        else:
            instruction_pattern = f"{instruction_name}_empty"
        
        # –°–æ–∑–¥–∞–µ–º —Ö—ç—à –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        data_str = json.dumps(details, sort_keys=True) if details else ""
        data_hash = hashlib.md5(data_str.encode()).hexdigest()[:12]
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫
        fingerprint_components = [
            program_id,
            instruction_pattern,
            str(len(accounts)) if isinstance(accounts, list) else "0",
            data_hash[:8]
        ]
        
        fingerprint = hashlib.sha256("|".join(fingerprint_components).encode()).hexdigest()[:16]
        
        return UnknownEventFingerprint(
            fingerprint=fingerprint,
            program_id=program_id,
            instruction_pattern=instruction_pattern,
            data_hash=data_hash,
            account_count=len(accounts) if isinstance(accounts, list) else 0,
            classification=event_data.get('unknown_classification', 'unknown')
        )
    
    def _load_unknown_events(self, days_back: int = 7) -> int:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç UNKNOWN —Å–æ–±—ã—Ç–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
        """
        conn = sqlite3.connect(self.db_path)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
        end_time = datetime.now()
        start_time = end_time - timedelta(days=days_back)
        start_timestamp = int(start_time.timestamp())
        
        query = """
        SELECT 
            e.signature,
            e.program_id,
            e.instruction_name,
            e.unknown_classification,
            e.unknown_reason,
            e.block_time,
            e.token_address,
            e.instruction_index,
            e.details
        FROM enhanced_ml_events e
        WHERE e.event_type = 'UNKNOWN'
        AND e.block_time >= ?
        AND e.unknown_classification IN ('valid_program', 'defi_related', 'nft_related')
        ORDER BY e.block_time
        """
        
        cursor = conn.cursor()
        cursor.execute(query, [start_timestamp])
        rows = cursor.fetchall()
        conn.close()
        
        self.unknown_events = []
        for row in rows:
            event_data = {
                'signature': row[0],
                'program_id': row[1],
                'instruction_name': row[2],
                'unknown_classification': row[3],
                'unknown_reason': row[4],
                'block_time': row[5],
                'token_address': row[6],
                'instruction_index': row[7],
                'details': json.loads(row[8]) if row[8] else {}
            }
            self.unknown_events.append(event_data)
        
        logger.info(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.unknown_events)} UNKNOWN —Å–æ–±—ã—Ç–∏–π –∑–∞ {days_back} –¥–Ω–µ–π")
        return len(self.unknown_events)
    
    def _identify_cross_token_patterns(self) -> int:
        """
        –ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã UNKNOWN —Å–æ–±—ã—Ç–∏–π, –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —É —Ä–∞–∑–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.
        """
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –æ—Ç–ø–µ—á–∞—Ç–∫–∞–º
        fingerprint_groups = defaultdict(list)
        
        for event in self.unknown_events:
            fp = self._create_advanced_fingerprint(event)
            fingerprint_groups[fp.fingerprint].append((event, fp))
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤
        self.cross_token_patterns = []
        
        for fingerprint, events_with_fp in fingerprint_groups.items():
            events = [e[0] for e in events_with_fp]
            fp_obj = events_with_fp[0][1]  # –ë–µ—Ä–µ–º –æ–±—ä–µ–∫—Ç –æ—Ç–ø–µ—á–∞—Ç–∫–∞ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ
            tokens_in_group = set(e['token_address'] for e in events if e['token_address'])
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
            if len(tokens_in_group) >= 2:  # –ú–∏–Ω–∏–º—É–º 2 —Ç–æ–∫–µ–Ω–∞
                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
                timestamps = [e['block_time'] for e in events]
                time_span = (max(timestamps) - min(timestamps)) / 3600  # –í —á–∞—Å–∞—Ö
                
                # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ program_id
                program_ids = set(e['program_id'] for e in events)
                
                # –ë–µ—Ä–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–∏–≥–Ω–∞—Ç—É—Ä (–¥–æ 5 —à—Ç—É–∫)
                example_signatures = [e['signature'] for e in events[:5]]
                
                pattern = CrossTokenPattern(
                    fingerprint=fingerprint,
                    tokens_count=len(tokens_in_group),
                    total_occurrences=len(events),
                    time_span_hours=time_span,
                    tokens_involved=list(tokens_in_group),
                    program_ids=program_ids,
                    example_signatures=example_signatures,
                    dump_correlations=0,  # –ë—É–¥–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–æ –ø–æ–∑–∂–µ
                    statistical_significance=0.0  # –ë—É–¥–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–æ –ø–æ–∑–∂–µ
                )
                
                self.cross_token_patterns.append(pattern)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–∫–µ–Ω–æ–≤ –∏ –≤—Ö–æ–∂–¥–µ–Ω–∏–π
        self.cross_token_patterns.sort(
            key=lambda p: (p.tokens_count, p.total_occurrences), 
            reverse=True
        )
        
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(self.cross_token_patterns)} –∫—Ä–æ—Å—Å-—Ç–æ–∫–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
        return len(self.cross_token_patterns)
    
    def generate_analysis_report(self) -> Dict:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∫—Ä–æ—Å—Å-—Ç–æ–∫–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤.
        """
        # –¢–æ–ø-10 —Å–∞–º—ã—Ö –∑–Ω–∞—á–∏–º—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        top_patterns = self.cross_token_patterns[:10]
        
        # –°—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_events = len(self.unknown_events)
        patterns_with_dumps = len([p for p in self.cross_token_patterns if p.dump_correlations > 0])
        high_significance_patterns = len([p for p in self.cross_token_patterns if p.statistical_significance > 0.7])
        
        report = {
            "analysis_timestamp": datetime.now().isoformat(),
            "summary": {
                "total_unknown_events": total_events,
                "cross_token_patterns_found": len(self.cross_token_patterns),
                "patterns_correlated_with_dumps": patterns_with_dumps,
                "high_significance_patterns": high_significance_patterns,
                "correlation_rate": patterns_with_dumps / len(self.cross_token_patterns) if self.cross_token_patterns else 0
            },
            "top_patterns": [
                {
                    "rank": i + 1,
                    "fingerprint": p.fingerprint,
                    "significance_score": round(p.statistical_significance, 3),
                    "tokens_involved": p.tokens_count,
                    "total_occurrences": p.total_occurrences,
                    "dump_correlations": p.dump_correlations,
                    "time_span_hours": round(p.time_span_hours, 2),
                    "program_ids": list(p.program_ids),
                    "example_signatures": p.example_signatures,
                    "affected_tokens": p.tokens_involved[:5]  # –ü–µ—Ä–≤—ã–µ 5 —Ç–æ–∫–µ–Ω–æ–≤
                }
                for i, p in enumerate(top_patterns)
            ],
            "recommendations": self._generate_recommendations(top_patterns),
            "hypothesis_validation": {
                "h007_status": "CONFIRMED" if high_significance_patterns > 0 else "NEEDS_MORE_DATA",
                "key_findings": self._extract_key_findings(top_patterns),
                "next_steps": self._suggest_next_steps(top_patterns)
            }
        }
        
        return report
    
    def _generate_recommendations(self, top_patterns: List[CrossTokenPattern]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤."""
        recommendations = []
        
        if not top_patterns:
            return ["–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö."]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ø –ø–∞—Ç—Ç–µ—Ä–Ω
        top_pattern = top_patterns[0]
        
        if top_pattern.statistical_significance > 0.8:
            recommendations.append(
                f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–†–ò–ì–ì–ï–†: –ü–∞—Ç—Ç–µ—Ä–Ω {top_pattern.fingerprint} –∏–º–µ–µ—Ç –≤—ã—Å–æ–∫—É—é –∑–Ω–∞—á–∏–º–æ—Å—Ç—å "
                f"({top_pattern.statistical_significance:.1%}). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–ª–µ—Ä—Ç–∏–Ω–≥–∞."
            )
        
        if top_pattern.dump_correlations >= 3:
            recommendations.append(
                f"üìä –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ù–ê–Ø –ö–û–†–†–ï–õ–Ø–¶–ò–Ø: –ü–∞—Ç—Ç–µ—Ä–Ω –∫–æ—Ä—Ä–µ–ª–∏—Ä—É–µ—Ç —Å {top_pattern.dump_correlations} –¥–∞–º–ø–∞–º–∏. "
                f"–ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è."
            )
        
        return recommendations
    
    def _extract_key_findings(self, top_patterns: List[CrossTokenPattern]) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≥–∏–ø–æ—Ç–µ–∑—ã."""
        findings = []
        
        if not top_patterns:
            return ["–ó–Ω–∞—á–∏–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"]
        
        # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        avg_time_span = sum(p.time_span_hours for p in top_patterns[:5]) / min(5, len(top_patterns))
        findings.append(f"–°—Ä–µ–¥–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–∏–º—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {avg_time_span:.1f} —á–∞—Å–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–æ–≤
        max_tokens = max(p.tokens_count for p in top_patterns)
        findings.append(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ–¥–Ω–æ–º –ø–∞—Ç—Ç–µ—Ä–Ω–µ: {max_tokens}")
        
        return findings
    
    def _suggest_next_steps(self, top_patterns: List[CrossTokenPattern]) -> List[str]:
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è."""
        steps = []
        
        if top_patterns:
            steps.append("1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–ª–µ—Ä—Ç–∏–Ω–≥ –¥–ª—è —Ç–æ–ø-3 –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ production")
            steps.append("2. –ü—Ä–æ–≤–µ—Å—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ program_id –∏–∑ –∑–Ω–∞—á–∏–º—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
            steps.append("3. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å backtesting –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
        else:
            steps.append("1. –£–≤–µ–ª–∏—á–∏—Ç—å –ø–µ—Ä–∏–æ–¥ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ 30 –¥–Ω–µ–π")
            steps.append("2. –°–Ω–∏–∑–∏—Ç—å –ø–æ—Ä–æ–≥–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏")
        
        return steps
    
    def run_full_analysis(self, days_back: int = 7) -> Dict:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ—Å—Å-—Ç–æ–∫–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ UNKNOWN —Å–æ–±—ã—Ç–∏–π.
        """
        logger.info("üîç –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∫—Ä–æ—Å—Å-—Ç–æ–∫–µ–Ω –∞–Ω–∞–ª–∏–∑–∞ UNKNOWN —Å–æ–±—ã—Ç–∏–π")
        
        # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        events_loaded = self._load_unknown_events(days_back)
        if events_loaded == 0:
            return {"error": "–ù–µ—Ç UNKNOWN —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"}
        
        # 2. –ü–æ–∏—Å–∫ –∫—Ä–æ—Å—Å-—Ç–æ–∫–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        patterns_found = self._identify_cross_token_patterns()
        if patterns_found == 0:
            return {"error": "–ö—Ä–æ—Å—Å-—Ç–æ–∫–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}
        
        # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        report = self.generate_analysis_report()
        
        logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return report

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞."""
    print("üìä –ö–†–û–°–°-–¢–û–ö–ï–ù –ê–ù–ê–õ–ò–ó–ê–¢–û–† UNKNOWN –°–û–ë–´–¢–ò–ô")
    print("üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ì–∏–ø–æ—Ç–µ–∑—ã H-007: –¢—Ä–∏–≥–≥–µ—Ä –≤ –°–∫—Ä—ã—Ç–æ–π –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
    print("=" * 60)
    
    analyzer = CrossTokenUnknownAnalyzer()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    report = analyzer.run_full_analysis(days_back=7)
    
    if "error" in report:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {report['error']}")
        return
    
    # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    summary = report["summary"]
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ UNKNOWN —Å–æ–±—ã—Ç–∏–π: {summary['total_unknown_events']}")
    print(f"   ‚Ä¢ –ö—Ä–æ—Å—Å-—Ç–æ–∫–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {summary['cross_token_patterns_found']}")
    print(f"   ‚Ä¢ –ö–æ—Ä—Ä–µ–ª–∏—Ä—É—é—Ç —Å –¥–∞–º–ø–∞–º–∏: {summary['patterns_correlated_with_dumps']}")
    print(f"   ‚Ä¢ –í—ã—Å–æ–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å: {summary['high_significance_patterns']}")
    print(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {summary['correlation_rate']:.1%}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 –ø–∞—Ç—Ç–µ—Ä–Ω–∞
    if report["top_patterns"]:
        print(f"\nüèÜ –¢–û–ü-3 –ó–ù–ê–ß–ò–ú–´–• –ü–ê–¢–¢–ï–†–ù–ê:")
        for pattern in report["top_patterns"][:3]:
            print(f"   {pattern['rank']}. –û—Ç–ø–µ—á–∞—Ç–æ–∫: {pattern['fingerprint']}")
            print(f"      –ó–Ω–∞—á–∏–º–æ—Å—Ç—å: {pattern['significance_score']:.1%}")
            print(f"      –¢–æ–∫–µ–Ω–æ–≤: {pattern['tokens_involved']}, –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–π: {pattern['dump_correlations']}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
    os.makedirs('analysis/reports', exist_ok=True)
    report_file = f"analysis/reports/cross_token_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    
    with open(report_file, 'w') as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    print(f"\nüíæ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")

if __name__ == "__main__":
    main() 