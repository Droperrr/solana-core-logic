#!/usr/bin/env python3
"""
üîÑ LIVE –ú–û–ù–ò–¢–û–†–ò–ù–ì: –û–ø–µ—Ä–∞—Ü–∏—è –ê–¥–∞–ø—Ç–∞—Ü–∏—è
–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª—è–µ–º—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ì—Ä—É–ø–ø—ã –ë
"""

import os
import sys
import sqlite3
import time
import json
from datetime import datetime, timedelta
from typing import Dict, List

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))

class LiveGroupBMonitor:
    """Live –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ì—Ä—É–ø–ø—ã –ë"""
    
    def __init__(self):
        self.tokens = self._load_tokens()
        self.start_time = datetime.now()
        self.last_update = None
        self.history = []
        
    def _load_tokens(self) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –ì—Ä—É–ø–ø—ã –ë"""
        try:
            with open("data/group_b_tokens.txt", 'r') as f:
                return [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            return []
    
    def get_live_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if not os.path.exists("solana_db.sqlite"):
            return {
                'status': 'DB_NOT_FOUND',
                'progress': 0,
                'tokens_completed': 0,
                'total_transactions': 0,
                'collection_rate': 0,
                'estimated_completion': None
            }
        
        try:
            conn = sqlite3.connect("solana_db.sqlite")
            cursor = conn.cursor()
            
            tokens_completed = 0
            total_transactions = 0
            token_details = []
            
            for token in self.tokens:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                cursor.execute("""
                    SELECT COUNT(*) FROM transactions 
                    WHERE token_a_mint = ? OR token_b_mint = ?
                """, (token, token))
                tx_count = cursor.fetchone()[0]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º enriched —Å–æ–±—ã—Ç–∏—è
                cursor.execute("""
                    SELECT COUNT(*) FROM ml_ready_events 
                    WHERE token_a_mint = ? OR token_b_mint = ?
                """, (token, token))
                event_count = cursor.fetchone()[0]
                
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                cursor.execute("""
                    SELECT MAX(timestamp) FROM transactions 
                    WHERE token_a_mint = ? OR token_b_mint = ?
                """, (token, token))
                last_activity = cursor.fetchone()[0]
                
                if tx_count > 0:
                    tokens_completed += 1
                    total_transactions += tx_count
                
                token_details.append({
                    'address': token,
                    'transactions': tx_count,
                    'events': event_count,
                    'last_activity': last_activity,
                    'completed': tx_count > 0
                })
            
            conn.close()
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress = (tokens_completed / len(self.tokens)) * 100
            
            # –û—Ü–µ–Ω–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–±–æ—Ä–∞
            now = datetime.now()
            elapsed_seconds = (now - self.start_time).total_seconds()
            collection_rate = tokens_completed / elapsed_seconds if elapsed_seconds > 0 else 0
            
            # –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            remaining_tokens = len(self.tokens) - tokens_completed
            estimated_completion = None
            if collection_rate > 0 and remaining_tokens > 0:
                remaining_seconds = remaining_tokens / collection_rate
                estimated_completion = now + timedelta(seconds=remaining_seconds)
            
            stats = {
                'status': 'COMPLETED' if progress == 100 else 'IN_PROGRESS',
                'progress': progress,
                'tokens_completed': tokens_completed,
                'total_tokens': len(self.tokens),
                'total_transactions': total_transactions,
                'collection_rate': collection_rate * 3600,  # —Ç–æ–∫–µ–Ω–æ–≤ –≤ —á–∞—Å
                'estimated_completion': estimated_completion,
                'token_details': token_details,
                'elapsed_time': elapsed_seconds
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.history.append({
                'timestamp': now,
                'tokens_completed': tokens_completed,
                'total_transactions': total_transactions
            })
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 –∏–∑–º–µ—Ä–µ–Ω–∏–π (–ø—Ä–∏–º–µ—Ä–Ω–æ —á–∞—Å –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)
            if len(self.history) > 60:
                self.history = self.history[-60:]
            
            return stats
            
        except Exception as e:
            return {
                'status': 'ERROR',
                'error': str(e),
                'progress': 0
            }
    
    def print_live_dashboard(self, stats: Dict):
        """–í—ã–≤–æ–¥–∏—Ç live dashboard"""
        
        # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω
        os.system('cls' if os.name == 'nt' else 'clear')
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤—Ä–µ–º–µ–Ω–µ–º
        now = datetime.now()
        print("‚ñà" * 80)
        print("üîÑ LIVE –ú–û–ù–ò–¢–û–†–ò–ù–ì: –û–ü–ï–†–ê–¶–ò–Ø –ê–î–ê–ü–¢–ê–¶–ò–Ø")
        print(f"‚è∞ {now.strftime('%H:%M:%S')} | –ó–∞–ø—É—â–µ–Ω: {self.start_time.strftime('%H:%M:%S')}")
        print("‚ñà" * 80)
        
        if stats['status'] == 'ERROR':
            print(f"‚ùå –û–®–ò–ë–ö–ê: {stats.get('error', 'Unknown error')}")
            return
        
        if stats['status'] == 'DB_NOT_FOUND':
            print("‚è≥ –û–ñ–ò–î–ê–ù–ò–ï: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
            print("üí° –ü—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            return
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìä –°–¢–ê–¢–£–° –°–ë–û–†–ê –î–ê–ù–ù–´–• –ì–†–£–ü–ü–´ –ë")
        print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {stats['tokens_completed']}/{stats['total_tokens']} —Ç–æ–∫–µ–Ω–æ–≤ ({stats['progress']:.1f}%)")
        print(f"   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å–æ–±—Ä–∞–Ω–æ: {stats['total_transactions']:,}")
        print(f"   –°–∫–æ—Ä–æ—Å—Ç—å —Å–±–æ—Ä–∞: {stats['collection_rate']:.1f} —Ç–æ–∫–µ–Ω–æ–≤/—á–∞—Å")
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        bar_length = 50
        filled = int(bar_length * stats['progress'] / 100)
        bar = '‚ñà' * filled + '‚ñë' * (bar_length - filled)
        print(f"\nüìà [{bar}] {stats['progress']:.1f}%")
        
        # –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if stats['estimated_completion']:
            completion_time = stats['estimated_completion'].strftime('%H:%M:%S')
            remaining = stats['estimated_completion'] - now
            remaining_minutes = int(remaining.total_seconds() / 60)
            print(f"‚è∞ –û–∂–∏–¥–∞–µ–º–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {completion_time} (—á–µ—Ä–µ–∑ ~{remaining_minutes} –º–∏–Ω)")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ —Ç–æ–∫–µ–Ω–∞–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
        print(f"\nüìã –ü–û–°–õ–ï–î–ù–ò–ï –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ï –¢–û–ö–ï–ù–´:")
        print("   " + "-" * 70)
        
        recent_tokens = [t for t in stats['token_details'] if t['completed']][-10:]
        for i, token in enumerate(recent_tokens, 1):
            addr_short = f"{token['address'][:6]}...{token['address'][-6:]}"
            print(f"   ‚úÖ {addr_short} | TX: {token['transactions']:4d} | Events: {token['events']:4d}")
        
        # –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
        pending_tokens = [t for t in stats['token_details'] if not t['completed']]
        if pending_tokens:
            next_token = pending_tokens[0]['address']
            print(f"\n‚öôÔ∏è –¢–ï–ö–£–©–ò–ô: {next_token[:6]}...{next_token[-6:]}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if len(self.history) > 1:
            prev = self.history[-2]
            current = self.history[-1]
            
            tx_diff = current['total_transactions'] - prev['total_transactions']
            token_diff = current['tokens_completed'] - prev['tokens_completed']
            
            print(f"\nüìà –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ó–ê –ü–û–°–õ–ï–î–ù–Æ–Æ –ú–ò–ù–£–¢–£:")
            print(f"   +{token_diff} —Ç–æ–∫–µ–Ω–æ–≤ | +{tx_diff:,} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        
        # –°—Ç–∞—Ç—É—Å
        if stats['status'] == 'COMPLETED':
            print(f"\nüéâ –°–ë–û–† –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù!")
            print(f"   ‚úÖ –í—Å–µ {stats['total_tokens']} —Ç–æ–∫–µ–Ω–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
            print(f"   üìä –°–æ–±—Ä–∞–Ω–æ {stats['total_transactions']:,} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            print(f"   ‚ö° –ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤!")
        else:
            remaining = stats['total_tokens'] - stats['tokens_completed']
            print(f"\n‚öôÔ∏è –°–ë–û–† –î–ê–ù–ù–´–• –ü–†–û–î–û–õ–ñ–ê–ï–¢–°–Ø")
            print(f"   üì• –û—Å—Ç–∞–ª–æ—Å—å: {remaining} —Ç–æ–∫–µ–Ω–æ–≤")
            print(f"   ‚è≥ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 60 —Å–µ–∫...")
        
        print("‚ñà" * 80)
    
    def run_live_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç live –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        print("üöÄ –ó–∞–ø—É—Å–∫ live –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏...")
        print("‚ö†Ô∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞")
        
        try:
            while True:
                stats = self.get_live_stats()
                self.print_live_dashboard(stats)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º snapshot
                self._save_snapshot(stats)
                
                # –ï—Å–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –≤—ã—Ö–æ–¥–∏–º
                if stats.get('status') == 'COMPLETED':
                    print("\nüéØ –ì–û–¢–û–í –ö –ê–ù–ê–õ–ò–ó–£! –ó–∞–ø—É—Å—Ç–∏—Ç–µ:")
                    print("   python analysis/phase_group_b/validate_entry_pattern.py")
                    break
                
                # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É
                time.sleep(60)
                
        except KeyboardInterrupt:
            print(f"\n\nüëã Live –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            print(f"   –î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: python analysis/phase_group_b/live_monitor.py")
    
    def _save_snapshot(self, stats: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç snapshot —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M")
        filename = f"output/live_monitoring_snapshot_{timestamp}.json"
        
        snapshot = {
            'timestamp': datetime.now().isoformat(),
            'stats': stats,
            'monitoring_duration_minutes': (datetime.now() - self.start_time).total_seconds() / 60
        }
        
        os.makedirs('output', exist_ok=True)
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(snapshot, f, indent=2, ensure_ascii=False, default=str)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è live –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    monitor = LiveGroupBMonitor()
    monitor.run_live_monitoring()

if __name__ == "__main__":
    main() 