#!/usr/bin/env python3
"""
üöÄ –û–ü–ï–†–ê–¶–ò–Ø: –ê–î–ê–ü–¢–ê–¶–ò–Ø - –ö–æ–º–∞–Ω–¥–Ω–∞—è Dashboard
–ö—Ä–∞—Å–∏–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–∑ –æ–ø–µ—Ä–∞—Ü–∏–∏
"""

import os
import sys
import sqlite3
import json
from datetime import datetime
from typing import Dict, List

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))

class OperationAdaptationDashboard:
    """Dashboard –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –û–ø–µ—Ä–∞—Ü–∏–∏: –ê–¥–∞–ø—Ç–∞—Ü–∏—è"""
    
    def __init__(self):
        self.start_time = datetime.now()
        self.tokens = self._load_tokens()
        
    def _load_tokens(self) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –ì—Ä—É–ø–ø—ã –ë"""
        try:
            with open("data/group_b_tokens.txt", 'r') as f:
                return [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            return []
    
    def get_phase_status(self) -> Dict:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–π —Ñ–∞–∑—ã –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        
        # –§–∞–∑–∞ 1: Data Acquisition
        phase1_status = self._check_data_acquisition()
        
        # –§–∞–∑–∞ 2: Pattern Discovery  
        phase2_status = self._check_pattern_discovery()
        
        # –§–∞–∑–∞ 3: Model Generalization
        phase3_status = self._check_model_generalization()
        
        # –§–∞–∑–∞ 4: Backtesting
        phase4_status = self._check_backtesting()
        
        return {
            'phase1': phase1_status,
            'phase2': phase2_status, 
            'phase3': phase3_status,
            'phase4': phase4_status
        }
    
    def _check_data_acquisition(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ —Ç–æ–∫–µ–Ω–æ–≤
        tokens_ready = len(self.tokens) == 20
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
        db_exists = os.path.exists("solana_db.sqlite")
        
        if not db_exists:
            return {
                'status': 'NOT_STARTED',
                'progress': 0,
                'details': '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–∑–¥–∞–Ω–∞',
                'next_action': '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö'
            }
        
        # –ü–æ–¥—Å—á–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        try:
            conn = sqlite3.connect("solana_db.sqlite")
            cursor = conn.cursor()
            
            tokens_collected = 0
            total_transactions = 0
            
            for token in self.tokens:
                cursor.execute("""
                    SELECT COUNT(*) FROM transactions 
                    WHERE token_a_mint = ? OR token_b_mint = ?
                """, (token, token))
                count = cursor.fetchone()[0]
                if count > 0:
                    tokens_collected += 1
                    total_transactions += count
            
            conn.close()
            
            progress = (tokens_collected / len(self.tokens)) * 100
            
            if progress == 0:
                status = 'IN_PROGRESS'
                details = '–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'
            elif progress < 100:
                status = 'IN_PROGRESS'
                details = f'{tokens_collected}/{len(self.tokens)} —Ç–æ–∫–µ–Ω–æ–≤, {total_transactions:,} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π'
            else:
                status = 'COMPLETED'
                details = f'–í—Å–µ {len(self.tokens)} —Ç–æ–∫–µ–Ω–æ–≤ —Å–æ–±—Ä–∞–Ω—ã, {total_transactions:,} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π'
            
            return {
                'status': status,
                'progress': progress,
                'details': details,
                'next_action': '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è' if status == 'IN_PROGRESS' else '–ü–µ—Ä–µ—Ö–æ–¥ –∫ –∞–Ω–∞–ª–∏–∑—É'
            }
            
        except Exception as e:
            return {
                'status': 'ERROR',
                'progress': 0,
                'details': f'–û—à–∏–±–∫–∞ –ë–î: {str(e)}',
                'next_action': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∞'
            }
    
    def _check_pattern_discovery(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        pattern_files = [
            'output/group_b_entry_pattern_analysis_*.json'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        phase1_ready = self._check_data_acquisition()['status'] == 'COMPLETED'
        
        if not phase1_ready:
            return {
                'status': 'WAITING',
                'progress': 0,
                'details': '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö',
                'next_action': '–î–æ–∂–¥–∞—Ç—å—Å—è Phase 1'
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–Ω–∞–ª–∏–∑–∞
        analysis_exists = any(os.path.exists(f.replace('*', '')) for f in pattern_files)
        
        if not analysis_exists:
            return {
                'status': 'READY',
                'progress': 0,
                'details': '–î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã, –∞–Ω–∞–ª–∏–∑ –Ω–µ –∑–∞–ø—É—â–µ–Ω',
                'next_action': '–ó–∞–ø—É—Å—Ç–∏—Ç—å validate_entry_pattern.py'
            }
        
        return {
            'status': 'IN_PROGRESS',
            'progress': 50,
            'details': '–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
            'next_action': '–î–æ–∂–¥–∞—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'
        }
    
    def _check_model_generalization(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_files = [
            'configs/triggers/group_a_trigger.json',
            'configs/triggers/group_b_trigger.json'
        ]
        
        configs_ready = all(os.path.exists(f) for f in config_files)
        
        if not configs_ready:
            return {
                'status': 'READY',
                'progress': 30,
                'details': '–ß–∞—Å—Ç–∏—á–Ω–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π',
                'next_action': '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π'
            }
        
        return {
            'status': 'IN_PROGRESS',
            'progress': 70,
            'details': '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã',
            'next_action': '–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é'
        }
    
    def _check_backtesting(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥—É"""
        
        return {
            'status': 'PENDING',
            'progress': 0,
            'details': '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ñ–∞–∑',
            'next_action': '–î–æ–∂–¥–∞—Ç—å—Å—è Phase 2 –∏ 3'
        }
    
    def print_beautiful_dashboard(self):
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—É—é dashboard"""
        
        phases = self.get_phase_status()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        print("\n" + "‚ñà"*80)
        print("üöÄ –û–ü–ï–†–ê–¶–ò–Ø: –ê–î–ê–ü–¢–ê–¶–ò–Ø - –ö–û–ú–ê–ù–î–ù–ê–Ø DASHBOARD")
        print("‚ñà"*80)
        print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {self.start_time.strftime('%H:%M:%S')}")
        print(f"üéØ –¶–µ–ª—å: –ê–Ω–∞–ª–∏–∑ –ì—Ä—É–ø–ø—ã –ë ({len(self.tokens)} —Ç–æ–∫–µ–Ω–æ–≤)")
        print("‚ñà"*80)
        
        # –°—Ç–∞—Ç—É—Å —Ñ–∞–∑
        phase_info = {
            'phase1': ('üì• –§–ê–ó–ê 1: –°–ë–û–† –î–ê–ù–ù–´–•', 'Data Acquisition & Verification'),
            'phase2': ('üîç –§–ê–ó–ê 2: –ê–ù–ê–õ–ò–ó –ü–ê–¢–¢–ï–†–ù–û–í', 'Pattern Discovery'),
            'phase3': ('‚öôÔ∏è –§–ê–ó–ê 3: –£–ù–ò–í–ï–†–°–ê–õ–ò–ó–ê–¶–ò–Ø', 'Model Generalization'),
            'phase4': ('üìä –§–ê–ó–ê 4: –ë–≠–ö–¢–ï–°–¢–ò–ù–ì', 'Backtesting & Trading Prep')
        }
        
        for phase_key, (title, subtitle) in phase_info.items():
            phase = phases[phase_key]
            status_emoji = {
                'NOT_STARTED': '‚è≥',
                'WAITING': '‚è∏Ô∏è',
                'READY': '‚úÖ',
                'IN_PROGRESS': '‚öôÔ∏è',
                'COMPLETED': '‚úÖ',
                'ERROR': '‚ùå',
                'PENDING': '‚è≥'
            }
            
            emoji = status_emoji.get(phase['status'], '‚ùì')
            progress_bar = self._create_progress_bar(phase['progress'])
            
            print(f"\n{title}")
            print(f"   {subtitle}")
            print(f"   –°—Ç–∞—Ç—É—Å: {emoji} {phase['status']} | {progress_bar} {phase['progress']:.0f}%")
            print(f"   –î–µ—Ç–∞–ª–∏: {phase['details']}")
            print(f"   –î–µ–π—Å—Ç–≤–∏–µ: {phase['next_action']}")
        
        # –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        overall_progress = sum(p['progress'] for p in phases.values()) / 4
        overall_bar = self._create_progress_bar(overall_progress)
        
        print("\n" + "‚ñà"*80)
        print(f"üìà –û–ë–©–ò–ô –ü–†–û–ì–†–ï–°–° –û–ü–ï–†–ê–¶–ò–ò: {overall_bar} {overall_progress:.1f}%")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        ready_actions = [phase['next_action'] for phase in phases.values() 
                        if '–ó–∞–ø—É—Å—Ç–∏—Ç—å' in phase['next_action']]
        
        if ready_actions:
            for i, action in enumerate(ready_actions, 1):
                print(f"   {i}. {action}")
        else:
            print("   ‚è≥ –î–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        
        print("‚ñà"*80)
    
    def _create_progress_bar(self, progress: float, length: int = 20) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        filled = int(length * progress / 100)
        bar = '‚ñà' * filled + '‚ñë' * (length - filled)
        return f"[{bar}]"
    
    def save_status_report(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        phases = self.get_phase_status()
        
        report = {
            'operation': '–ê–î–ê–ü–¢–ê–¶–ò–Ø',
            'timestamp': datetime.now().isoformat(),
            'start_time': self.start_time.isoformat(),
            'tokens_count': len(self.tokens),
            'phases': phases,
            'overall_progress': sum(p['progress'] for p in phases.values()) / 4
        }
        
        os.makedirs('output', exist_ok=True)
        filename = f"output/operation_adaptation_status_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è dashboard"""
    dashboard = OperationAdaptationDashboard()
    
    # –í—ã–≤–æ–¥–∏–º dashboard
    dashboard.print_beautiful_dashboard()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    dashboard.save_status_report()

if __name__ == "__main__":
    main() 