#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ì—Ä—É–ø–ø—ã –ë
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
"""

import os
import sys
import sqlite3
import time
import json
from datetime import datetime
from typing import Dict, List, Tuple

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))

class GroupBDataCollectionMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ì—Ä—É–ø–ø—ã –ë"""
    
    def __init__(self, db_path: str = "solana_db.sqlite"):
        self.db_path = db_path
        self.tokens = self._load_tokens()
        
    def _load_tokens(self) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –ì—Ä—É–ø–ø—ã –ë"""
        try:
            with open("data/group_b_tokens.txt", 'r') as f:
                return [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            return []
    
    def get_collection_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        if not os.path.exists(self.db_path):
            return {
                'tokens_total': len(self.tokens),
                'tokens_collected': 0,
                'transactions_total': 0,
                'enriched_events': 0,
                'tokens_details': [],
                'collection_status': 'NOT_STARTED'
            }
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        stats = {
            'tokens_total': len(self.tokens),
            'tokens_collected': 0,
            'transactions_total': 0,
            'enriched_events': 0,
            'tokens_details': [],
            'collection_status': 'IN_PROGRESS'
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–∫–µ–Ω
        for token in self.tokens:
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            cursor.execute("""
                SELECT COUNT(*) FROM transactions 
                WHERE token_a_mint = ? OR token_b_mint = ?
            """, (token, token))
            tx_count = cursor.fetchone()[0]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ enriched —Å–æ–±—ã—Ç–∏–π
            cursor.execute("""
                SELECT COUNT(*) FROM ml_ready_events 
                WHERE token_a_mint = ? OR token_b_mint = ?
            """, (token, token))
            enriched_count = cursor.fetchone()[0]
            
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            cursor.execute("""
                SELECT MAX(timestamp) FROM transactions 
                WHERE token_a_mint = ? OR token_b_mint = ?
            """, (token, token))
            last_activity = cursor.fetchone()[0]
            
            token_info = {
                'address': token,
                'transactions': tx_count,
                'enriched_events': enriched_count,
                'last_activity': last_activity,
                'status': 'COLLECTED' if tx_count > 0 else 'PENDING'
            }
            
            stats['tokens_details'].append(token_info)
            
            if tx_count > 0:
                stats['tokens_collected'] += 1
            
            stats['transactions_total'] += tx_count
            stats['enriched_events'] += enriched_count
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        if stats['tokens_collected'] == 0:
            stats['collection_status'] = 'NOT_STARTED'
        elif stats['tokens_collected'] == stats['tokens_total']:
            stats['collection_status'] = 'COMPLETED'
        else:
            stats['collection_status'] = 'IN_PROGRESS'
        
        conn.close()
        return stats
    
    def print_beautiful_status(self, stats: Dict):
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–π —Å—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        print("\n" + "="*80)
        print("üöÄ –û–ü–ï–†–ê–¶–ò–Ø: –ê–î–ê–ü–¢–ê–¶–ò–Ø - –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–ë–û–†–ê –î–ê–ù–ù–´–• –ì–†–£–ü–ü–´ –ë")
        print("="*80)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        progress_pct = (stats['tokens_collected'] / stats['tokens_total']) * 100
        status_emoji = {
            'NOT_STARTED': '‚è≥',
            'IN_PROGRESS': '‚öôÔ∏è',
            'COMPLETED': '‚úÖ'
        }
        
        print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –°—Ç–∞—Ç—É—Å: {status_emoji[stats['collection_status']]} {stats['collection_status']}")
        print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {stats['tokens_collected']}/{stats['tokens_total']} —Ç–æ–∫–µ–Ω–æ–≤ ({progress_pct:.1f}%)")
        print(f"   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å–æ–±—Ä–∞–Ω–æ: {stats['transactions_total']:,}")
        print(f"   –°–æ–±—ã—Ç–∏–π –æ–±–æ–≥–∞—â–µ–Ω–æ: {stats['enriched_events']:,}")
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        bar_length = 50
        filled_length = int(bar_length * progress_pct / 100)
        bar = '‚ñà' * filled_length + '‚ñë' * (bar_length - filled_length)
        print(f"\nüìà –ü–†–û–ì–†–ï–°–°: [{bar}] {progress_pct:.1f}%")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ —Ç–æ–∫–µ–Ω–∞–º
        if stats['tokens_details']:
            print(f"\nüìã –î–ï–¢–ê–õ–ò –ü–û –¢–û–ö–ï–ù–ê–ú:")
            print("   " + "-"*76)
            print("   ‚Ññ  | –°—Ç–∞—Ç—É—Å | –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π | –°–æ–±—ã—Ç–∏—è | –ê–¥—Ä–µ—Å")
            print("   " + "-"*76)
            
            for i, token in enumerate(stats['tokens_details'], 1):
                status_symbol = '‚úÖ' if token['status'] == 'COLLECTED' else '‚è≥'
                address_short = f"{token['address'][:8]}...{token['address'][-8:]}"
                
                print(f"   {i:2d} | {status_symbol}     | {token['transactions']:8d} | {token['enriched_events']:6d} | {address_short}")
        
        print("   " + "-"*76)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if stats['collection_status'] == 'NOT_STARTED':
            print("   üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö: python scripts/batch_process_all_tokens.py --tokens-file data/group_b_tokens.txt")
        elif stats['collection_status'] == 'IN_PROGRESS':
            print("   ‚è≥ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
            print("   üìä –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω—É–∂–Ω–æ")
        else:
            print("   üéØ –°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –∞–Ω–∞–ª–∏–∑—É –ø–∞—Ç—Ç–µ—Ä–Ω–∞:")
            print("   üìà python analysis/phase_group_b/validate_entry_pattern.py")
        
        print("\n" + "="*80)
    
    def save_progress_report(self, stats: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"output/group_b_collection_progress_{timestamp}.json"
        
        report = {
            'timestamp': datetime.now().isoformat(),
            'collection_stats': stats,
            'analysis_ready': stats['collection_status'] == 'COMPLETED'
        }
        
        os.makedirs('output', exist_ok=True)
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    monitor = GroupBDataCollectionMonitor()
    
    try:
        while True:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = monitor.get_collection_stats()
            
            # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω (–¥–ª—è Windows)
            os.system('cls' if os.name == 'nt' else 'clear')
            
            # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Å–∏–≤—ã–π —Å—Ç–∞—Ç—É—Å
            monitor.print_beautiful_status(stats)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
            monitor.save_progress_report(stats)
            
            # –ï—Å–ª–∏ —Å–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω, –≤—ã—Ö–æ–¥–∏–º
            if stats['collection_status'] == 'COMPLETED':
                print("\nüéâ –°–ë–û–† –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù! –ì–æ—Ç–æ–≤–æ –∫ –∞–Ω–∞–ª–∏–∑—É.")
                break
            
            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            print(f"\n‚è≥ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥... (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
            time.sleep(30)
            
    except KeyboardInterrupt:
        print(f"\n\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        print(f"   –î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: python analysis/phase_group_b/monitor_data_collection.py")

if __name__ == "__main__":
    main() 