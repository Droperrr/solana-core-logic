#!/usr/bin/env python3
"""
üìä –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
"""

import sqlite3
import json

def analyze_complete_data():
    """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('db/solana_db.sqlite')
    
    print("üìä –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –û –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø–•")
    print("=" * 60)
    
    # 1. –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    print("üîç 1. –ë–ê–ó–û–í–´–ï –ü–û–õ–Ø TRANSACTIONS:")
    tx_sample = conn.execute('''
        SELECT signature, block_time, slot, fee_payer, transaction_type, 
               source_query_type, source_query_address 
        FROM transactions LIMIT 1
    ''').fetchone()
    
    print(f"  üìù signature: {tx_sample[0][:30]}... (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)")
    print(f"  ‚è∞ block_time: {tx_sample[1]} (Unix timestamp)")
    print(f"  üé∞ slot: {tx_sample[2]} (–Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞ Solana)")
    print(f"  üëõ fee_payer: {tx_sample[3] or 'None'} (–∫–æ—à–µ–ª–µ–∫, –ø–ª–∞—Ç—è—â–∏–π –∫–æ–º–∏—Å—Å–∏—é)")
    print(f"  üìã transaction_type: {tx_sample[4]} (—Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)")
    print(f"  üéØ source_query_type: {tx_sample[5]} (—Ç–∏–ø –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)")
    print(f"  üéØ source_query_address: {tx_sample[6]} (–∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞)")
    
    # 2. Raw JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    print(f"\nüîç 2. RAW_JSON –°–¢–†–£–ö–¢–£–†–ê:")
    raw_row = conn.execute('SELECT raw_json FROM transactions LIMIT 1').fetchone()
    raw_data = json.loads(raw_row[0])
    
    print(f"  üìÑ blockTime: –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –±–ª–æ–∫–∞")
    print(f"  üìÑ meta: –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
    print(f"  üìÑ slot: –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞")
    print(f"  üìÑ transaction: –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
    print(f"  üìÑ version: –≤–µ—Ä—Å–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
    print(f"  üìÑ rpc_source: –∏—Å—Ç–æ—á–Ω–∏–∫ RPC")
    print(f"  üìÑ signature: –ø–æ–¥–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
    
    # –ê–Ω–∞–ª–∏–∑ transaction —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    if 'transaction' in raw_data:
        tx_data = raw_data['transaction']
        print(f"\n  üìÇ transaction —Å–æ–¥–µ—Ä–∂–∏—Ç:")
        print(f"    üìã message: {list(tx_data.get('message', {}).keys())}")
        print(f"    üìã signatures: —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–µ–π")
    
    # –ê–Ω–∞–ª–∏–∑ meta —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    if 'meta' in raw_data:
        meta_data = raw_data['meta']
        print(f"\n  üìÇ meta —Å–æ–¥–µ—Ä–∂–∏—Ç:")
        for key in meta_data.keys():
            print(f"    üìã {key}: {type(meta_data[key]).__name__}")
    
    # 3. Enriched Data —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    print(f"\nüîç 3. ENRICHED_DATA –°–¢–†–£–ö–¢–£–†–ê:")
    enriched_row = conn.execute('SELECT enriched_data FROM transactions LIMIT 1').fetchone()
    enriched_data = json.loads(enriched_row[0])
    
    if isinstance(enriched_data, list) and len(enriched_data) > 0:
        first_item = enriched_data[0]
        print(f"  üìã –°–ø–∏—Å–æ–∫ –∏–∑ {len(enriched_data)} –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π")
        print(f"  üìã –ü–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç:")
        for key in first_item.keys():
            print(f"    üé≠ {key}: {type(first_item[key]).__name__}")
    
    # 4. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ instruction data
    print(f"\nüîç 4. –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ò–ù–°–¢–†–£–ö–¶–ò–ô:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ instructions –≤ raw_data
    if 'transaction' in raw_data and 'message' in raw_data['transaction']:
        message = raw_data['transaction']['message']
        if 'instructions' in message:
            instructions = message['instructions']
            print(f"  üìã –ù–∞–π–¥–µ–Ω–æ {len(instructions)} –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
            
            for i, instr in enumerate(instructions[:2]):  # –ü–µ—Ä–≤—ã–µ 2 –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                print(f"    üîß –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è {i+1}:")
                for key, value in instr.items():
                    if key == 'data':
                        print(f"      üìÑ {key}: base64 data ({len(str(value))} chars)")
                    else:
                        print(f"      üìÑ {key}: {type(value).__name__} = {str(value)[:50]}")
    
    # 5. –ê–Ω–∞–ª–∏–∑ inner instructions
    if 'meta' in raw_data and 'innerInstructions' in raw_data['meta']:
        inner_instructions = raw_data['meta']['innerInstructions']
        print(f"\n  üìã Inner Instructions: {len(inner_instructions)} –≥—Ä—É–ø–ø")
        
        for i, group in enumerate(inner_instructions[:1]):  # –ü–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞
            if 'instructions' in group:
                print(f"    üîß –ì—Ä—É–ø–ø–∞ {i+1}: {len(group['instructions'])} –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
    
    # 6. –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    if 'meta' in raw_data:
        meta = raw_data['meta']
        print(f"\nüîç 5. –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ê–ö–ö–ê–£–ù–¢–û–í:")
        
        if 'preBalances' in meta:
            print(f"  üí∞ preBalances: –±–∞–ª–∞–Ω—ã –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ({len(meta['preBalances'])} –∞–∫–∫–∞—É–Ω—Ç–æ–≤)")
        if 'postBalances' in meta:
            print(f"  üí∞ postBalances: –±–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ({len(meta['postBalances'])} –∞–∫–∫–∞—É–Ω—Ç–æ–≤)")
        if 'preTokenBalances' in meta:
            print(f"  ü™ô preTokenBalances: —Ç–æ–∫–µ–Ω-–±–∞–ª–∞–Ω—Å—ã –¥–æ ({len(meta['preTokenBalances'])} —Ç–æ–∫–µ–Ω–æ–≤)")
        if 'postTokenBalances' in meta:
            print(f"  ü™ô postTokenBalances: —Ç–æ–∫–µ–Ω-–±–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ ({len(meta['postTokenBalances'])} —Ç–æ–∫–µ–Ω–æ–≤)")
        if 'logMessages' in meta:
            print(f"  üìù logMessages: –ª–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ({len(meta['logMessages'])} —Å–æ–æ–±—â–µ–Ω–∏–π)")
    
    # 7. –ê–Ω–∞–ª–∏–∑ ML events (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
    print(f"\nüîç 6. ML_READY_EVENTS:")
    ml_count = conn.execute('SELECT COUNT(*) FROM ml_ready_events').fetchone()[0]
    print(f"  üìä –í—Å–µ–≥–æ ML —Å–æ–±—ã—Ç–∏–π: {ml_count}")
    
    if ml_count > 0:
        ml_sample = conn.execute('''
            SELECT event_type, platform, program_id, instruction_name
            FROM ml_ready_events 
            WHERE event_type IS NOT NULL 
            LIMIT 3
        ''').fetchall()
        
        for i, ml_event in enumerate(ml_sample):
            print(f"    üé≠ –°–æ–±—ã—Ç–∏–µ {i+1}: {ml_event[0]} –Ω–∞ {ml_event[1]} (program: {ml_event[2]})")
    
    conn.close()

def create_analysis_summary():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print(f"\nüìã –ò–¢–û–ì–û–í–´–ô –°–ü–ò–°–û–ö –î–û–°–¢–£–ü–ù–´–• –î–ê–ù–ù–´–•:")
    print("=" * 50)
    
    categories = {
        "üîç –ò–î–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ò": [
            "signature - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
            "slot - –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞ Solana",
            "block_time - —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (Unix timestamp)",
            "transaction_type - –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"
        ],
        
        "üëõ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–û–®–ï–õ–¨–ö–ê–•": [
            "fee_payer - –∫–æ—à–µ–ª–µ–∫, –ø–ª–∞—Ç—è—â–∏–π –∫–æ–º–∏—Å—Å–∏—é (—Ä–µ–¥–∫–æ –∑–∞–ø–æ–ª–Ω–µ–Ω)",
            "message.accountKeys - –≤—Å–µ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã",
            "preBalances/postBalances - –∏–∑–º–µ–Ω–µ–Ω–∏—è SOL –±–∞–ª–∞–Ω—Å–æ–≤",
            "preTokenBalances/postTokenBalances - –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω-–±–∞–ª–∞–Ω—Å–æ–≤"
        ],
        
        "üí∞ –§–ò–ù–ê–ù–°–û–í–´–ï –î–ê–ù–ù–´–ï": [
            "meta.fee - —Ä–∞–∑–º–µ—Ä –∫–æ–º–∏—Å—Å–∏–∏",
            "preBalances - –±–∞–ª–∞–Ω—Å—ã SOL –¥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
            "postBalances - –±–∞–ª–∞–Ω—Å—ã SOL –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
            "preTokenBalances - —Ç–æ–∫–µ–Ω-–±–∞–ª–∞–Ω—Å—ã –¥–æ",
            "postTokenBalances - —Ç–æ–∫–µ–Ω-–±–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ",
            "enriched_data - –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (—Å–≤–∞–ø—ã, —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—ã)"
        ],
        
        "üîß –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø": [
            "message.instructions - —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π",
            "meta.innerInstructions - –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
            "meta.logMessages - –ª–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º",
            "program_id - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤—ã–∑–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º",
            "instruction_name - –Ω–∞–∑–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"
        ],
        
        "‚è∞ –í–†–ï–ú–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï": [
            "block_time - –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
            "slot - –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –±–ª–æ–∫—á–µ–π–Ω–µ",
            "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã—á–∏—Å–ª–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏",
            "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏"
        ],
        
        "üéØ –ö–û–ù–¢–ï–ö–°–¢–ù–´–ï –î–ê–ù–ù–´–ï": [
            "source_query_address - –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞",
            "rpc_source - –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö",
            "enriched_data - —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è",
            "platform - –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ DEX (–µ—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞)"
        ],
        
        "üïµÔ∏è‚Äç‚ôÇÔ∏è –°–õ–ï–î–°–¢–í–ï–ù–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò": [
            "–ü–æ–ª–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ –≤—ã–∑–æ–≤–æ–≤ —á–µ—Ä–µ–∑ innerInstructions",
            "–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–æ–≤",
            "–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—à–∏–±–æ–∫",
            "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏",
            "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º –∏ –∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"
        ]
    }
    
    for category, items in categories.items():
        print(f"\n{category}:")
        for item in items:
            print(f"  ‚Ä¢ {item}")

def main():
    analyze_complete_data()
    create_analysis_summary()
    
    print(f"\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
    print(f"üí° –£ –Ω–∞—Å –µ—Å—Ç—å –æ—á–µ–Ω—å –±–æ–≥–∞—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏!")

if __name__ == "__main__":
    main() 