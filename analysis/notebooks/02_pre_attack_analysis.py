#!/usr/bin/env python3
"""
üìä –§–∞–∑–∞ 2.2.1.1: –ê–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π –ü–ï–†–ï–î –∞–Ω–æ–º–∞–ª—å–Ω—ã–º –¥–Ω–µ–º

–¶–ï–õ–¨: –ù–∞–π—Ç–∏ "—Å–∏–≥–Ω–∞–ª-–ø—Ä–µ–¥–≤–µ—Å—Ç–Ω–∏–∫" - —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ –î–û 13:01:18 1 –∞–ø—Ä–µ–ª—è?
–ì–ò–ü–û–¢–ï–ó–ê: –¢—Ä–∏–≥–≥–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–µ –≤ —Å–∞–º–æ–π –∞—Ç–∞–∫–µ, –∞ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–¥ –Ω–µ–π
"""

import sqlite3
import pandas as pd
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
TOKEN_ADDRESS = 'AL2HhMQLkJqeeK5w4akoogzyYBZ6GYkBfxjscCf2L2yC'
ANOMALOUS_DAY_START = '2025-04-01 13:00:00'
ANALYSIS_WINDOW_HOURS = 48  # 48 —á–∞—Å–æ–≤ –¥–æ –∞—Ç–∞–∫–∏
DB_PATH = 'db/solana_db.sqlite'

def get_attackers_wallets():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤-—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Å–∞ –∞—Ç–∞–∫–∏"""
    conn = sqlite3.connect(DB_PATH)
    
    # –ö–æ—à–µ–ª—å–∫–∏ –∏–∑ fee_payer (–æ—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
    fee_payer_query = """
    SELECT DISTINCT fee_payer
    FROM transactions 
    WHERE source_query_address = ?
      AND datetime(block_time, 'unixepoch') BETWEEN ? AND ?
    """
    
    attack_start = ANOMALOUS_DAY_START
    attack_end = '2025-04-01 14:00:00'
    
    fee_payers = pd.read_sql_query(
        fee_payer_query, 
        conn, 
        params=[TOKEN_ADDRESS, attack_start, attack_end]
    )['fee_payer'].tolist()
    
    # –ö–æ—à–µ–ª—å–∫–∏ –∏–∑ ML —Å–æ–±—ã—Ç–∏–π
    ml_wallets_query = """
    SELECT DISTINCT e.from_wallet, e.to_wallet
    FROM ml_ready_events e
    JOIN transactions t ON e.signature = t.signature
    WHERE t.source_query_address = ?
      AND datetime(t.block_time, 'unixepoch') BETWEEN ? AND ?
    """
    
    ml_wallets_df = pd.read_sql_query(
        ml_wallets_query, 
        conn, 
        params=[TOKEN_ADDRESS, attack_start, attack_end]
    )
    
    ml_wallets = []
    if len(ml_wallets_df) > 0:
        ml_wallets.extend(ml_wallets_df['from_wallet'].dropna().tolist())
        ml_wallets.extend(ml_wallets_df['to_wallet'].dropna().tolist())
    
    conn.close()
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    all_attackers = list(set(fee_payers + ml_wallets))
    all_attackers = [w for w in all_attackers if w and w != 'None']
    
    return all_attackers

def analyze_pre_attack_period():
    """–ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–∏–æ–¥–∞ –ü–ï–†–ï–î –∞—Ç–∞–∫–æ–π"""
    print("üîç –ê–ù–ê–õ–ò–ó –ü–ï–†–ò–û–î–ê –ü–ï–†–ï–î –ê–¢–ê–ö–û–ô")
    print("=" * 50)
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
    anomaly_start = datetime.strptime(ANOMALOUS_DAY_START, '%Y-%m-%d %H:%M:%S')
    analysis_start = anomaly_start - timedelta(hours=ANALYSIS_WINDOW_HOURS)
    
    print(f"üéØ –¢–æ–∫–µ–Ω: {TOKEN_ADDRESS}")
    print(f"‚è∞ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –ø–µ—Ä–∏–æ–¥: {analysis_start.strftime('%Y-%m-%d %H:%M')} - {anomaly_start.strftime('%Y-%m-%d %H:%M')}")
    print(f"üìä –û–∫–Ω–æ –∞–Ω–∞–ª–∏–∑–∞: {ANALYSIS_WINDOW_HOURS} —á–∞—Å–æ–≤")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—Ç–∞–∫—É—é—â–∏—Ö
    attackers = get_attackers_wallets()
    print(f"üë• –ö–æ—à–µ–ª—å–∫–æ–≤-—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∞—Ç–∞–∫–∏: {len(attackers)}")
    
    conn = sqlite3.connect(DB_PATH)
    
    # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –≤ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥
    all_activity_query = """
    SELECT 
        signature,
        block_time,
        fee_payer,
        transaction_type,
        datetime(block_time, 'unixepoch') as readable_time
    FROM transactions 
    WHERE source_query_address = ?
      AND datetime(block_time, 'unixepoch') BETWEEN ? AND ?
    ORDER BY block_time
    """
    
    df_pre_activity = pd.read_sql_query(
        all_activity_query,
        conn,
        params=[TOKEN_ADDRESS, analysis_start.strftime('%Y-%m-%d %H:%M:%S'), ANOMALOUS_DAY_START]
    )
    
    print(f"\nüìä –û–ë–©–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨ –î–û –ê–¢–ê–ö–ò:")
    print(f"   –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(df_pre_activity):,}")
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤: {df_pre_activity['fee_payer'].nunique()}")
    
    if len(df_pre_activity) > 0:
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º
        df_pre_activity['datetime'] = pd.to_datetime(df_pre_activity['block_time'], unit='s')
        df_pre_activity['date'] = df_pre_activity['datetime'].dt.date
        daily_activity = df_pre_activity.groupby('date').size()
        
        print(f"\nüìÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º:")
        for date, count in daily_activity.items():
            print(f"   {date}: {count:,} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∞—Ç–∞–∫–∏
        pre_attack_participants = df_pre_activity[df_pre_activity['fee_payer'].isin(attackers)]
        
        print(f"\nüéØ –ê–ö–¢–ò–í–ù–û–°–¢–¨ –£–ß–ê–°–¢–ù–ò–ö–û–í –ê–¢–ê–ö–ò –î–û –°–û–ë–´–¢–ò–Ø:")
        print(f"   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ –∞—Ç–∞–∫–∏: {pre_attack_participants['fee_payer'].nunique()}")
        print(f"   –ò—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(pre_attack_participants):,}")
        
        if len(pre_attack_participants) > 0:
            print(f"\nüìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:")
            for _, tx in pre_attack_participants.iterrows():
                print(f"   {tx['readable_time']} | {tx['fee_payer'][:15]}... | {tx['transaction_type']}")
        else:
            print(f"   ‚úÖ –ù–ò –û–î–ò–ù —É—á–∞—Å—Ç–Ω–∏–∫ –∞—Ç–∞–∫–∏ –Ω–µ –ø—Ä–æ—è–≤–ª—è–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!")
            print(f"   üö® –≠—Ç–æ —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª: '–∑–∞—Ç–∏—à—å–µ –ø–µ—Ä–µ–¥ –±—É—Ä–µ–π'")
    
    # –ê–Ω–∞–ª–∏–∑ ML —Å–æ–±—ã—Ç–∏–π
    ml_pre_activity_query = """
    SELECT 
        e.signature,
        e.block_time,
        e.event_type,
        e.from_wallet,
        e.to_wallet,
        e.from_amount,
        e.to_amount,
        datetime(e.block_time, 'unixepoch') as readable_time
    FROM ml_ready_events e
    JOIN transactions t ON e.signature = t.signature
    WHERE t.source_query_address = ?
      AND datetime(e.block_time, 'unixepoch') BETWEEN ? AND ?
    ORDER BY e.block_time
    """
    
    df_ml_pre = pd.read_sql_query(
        ml_pre_activity_query,
        conn,
        params=[TOKEN_ADDRESS, analysis_start.strftime('%Y-%m-%d %H:%M:%S'), ANOMALOUS_DAY_START]
    )
    
    print(f"\nüé≠ ML –°–û–ë–´–¢–ò–Ø –î–û –ê–¢–ê–ö–ò:")
    print(f"   –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {len(df_ml_pre):,}")
    
    if len(df_ml_pre) > 0:
        # –¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
        event_types = df_ml_pre['event_type'].value_counts()
        print(f"   –¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π:")
        for event_type, count in event_types.items():
            print(f"      {event_type}: {count:,}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –±—É–¥—É—â–∏—Ö –∞—Ç–∞–∫—É—é—â–∏—Ö –≤ ML —Å–æ–±—ã—Ç–∏—è—Ö
        ml_attackers_involved = df_ml_pre[
            df_ml_pre['from_wallet'].isin(attackers) | 
            df_ml_pre['to_wallet'].isin(attackers)
        ]
        
        print(f"\n   üë• –°–æ–±—ã—Ç–∏—è —Å —É—á–∞—Å—Ç–∏–µ–º –±—É–¥—É—â–∏—Ö –∞—Ç–∞–∫—É—é—â–∏—Ö: {len(ml_attackers_involved):,}")
        
        if len(ml_attackers_involved) > 0:
            print(f"   üìã –î–µ—Ç–∞–ª–∏:")
            for _, event in ml_attackers_involved.iterrows():
                print(f"      {event['readable_time']} | {event['event_type']} | {event['from_wallet'][:10]}... ‚Üí {event['to_wallet'][:10]}...")
    
    conn.close()
    
    return df_pre_activity, df_ml_pre, attackers

def analyze_immediate_precursors():
    """–ê–Ω–∞–ª–∏–∑ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤)"""
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –ù–ï–ü–û–°–†–ï–î–°–¢–í–ï–ù–ù–´–• –ü–†–ï–î–®–ï–°–¢–í–ï–ù–ù–ò–ö–û–í")
    print("=" * 50)
    
    # –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 6 —á–∞—Å–∞—Ö –ø–µ—Ä–µ–¥ –∞—Ç–∞–∫–æ–π
    anomaly_start = datetime.strptime(ANOMALOUS_DAY_START, '%Y-%m-%d %H:%M:%S')
    immediate_start = anomaly_start - timedelta(hours=6)
    
    print(f"‚è∞ –ü–µ—Ä–∏–æ–¥: {immediate_start.strftime('%Y-%m-%d %H:%M')} - {anomaly_start.strftime('%Y-%m-%d %H:%M')}")
    
    conn = sqlite3.connect(DB_PATH)
    
    # –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤
    immediate_query = """
    SELECT 
        signature,
        block_time,
        fee_payer,
        transaction_type,
        datetime(block_time, 'unixepoch') as readable_time
    FROM transactions 
    WHERE source_query_address = ?
      AND datetime(block_time, 'unixepoch') BETWEEN ? AND ?
    ORDER BY block_time DESC
    """
    
    df_immediate = pd.read_sql_query(
        immediate_query,
        conn,
        params=[TOKEN_ADDRESS, immediate_start.strftime('%Y-%m-%d %H:%M:%S'), ANOMALOUS_DAY_START]
    )
    
    print(f"üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤: {len(df_immediate):,}")
    
    if len(df_immediate) > 0:
        print(f"\n‚è∞ –ë–õ–ò–ñ–ê–ô–®–ò–ï –ö –ê–¢–ê–ö–ï –°–û–ë–´–¢–ò–Ø:")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–µ—Ä–µ–¥ –∞—Ç–∞–∫–æ–π
        for _, tx in df_immediate.head(10).iterrows():
            time_diff = anomaly_start - datetime.strptime(tx['readable_time'], '%Y-%m-%d %H:%M:%S')
            hours_before = time_diff.total_seconds() / 3600
            print(f"   -{hours_before:.1f}—á | {tx['readable_time']} | {tx['fee_payer'][:15]}... | {tx['transaction_type']}")
    else:
        print(f"   ‚úÖ –ü–û–õ–ù–û–ï –ó–ê–¢–ò–®–¨–ï –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤!")
        print(f"   üö® –≠—Ç–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞—Ç–∞–∫–∏")
    
    conn.close()

def search_for_triggers(df_pre_activity, attackers):
    """–ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
    print(f"\nüéØ –ü–û–ò–°–ö –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–• –¢–†–ò–ì–ì–ï–†–û–í")
    print("=" * 40)
    
    triggers_found = []
    
    # 1. –ü–∞—Ç—Ç–µ—Ä–Ω "–∑–∞—Ç–∏—à—å–µ –ø–µ—Ä–µ–¥ –±—É—Ä–µ–π"
    if len(df_pre_activity) == 0:
        triggers_found.append("–ü–æ–ª–Ω–æ–µ –∑–∞—Ç–∏—à—å–µ –ø–µ—Ä–µ–¥ –∞—Ç–∞–∫–æ–π")
        print(f"üö® –¢–†–ò–ì–ì–ï–† #1: –ü–û–õ–ù–û–ï –ó–ê–¢–ò–®–¨–ï")
        print(f"   ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ {ANALYSIS_WINDOW_HOURS}—á –¥–æ –∞—Ç–∞–∫–∏")
        print(f"   üí° –£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∑–∞—Ä–∞–Ω–µ–µ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∞—Ç–∞–∫—É")
    
    # 2. –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    elif len(df_pre_activity) < 10:
        triggers_found.append("–ê–Ω–æ–º–∞–ª—å–Ω–æ –Ω–∏–∑–∫–∞—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
        print(f"üö® –¢–†–ò–ì–ì–ï–† #2: –ê–ù–û–ú–ê–õ–¨–ù–û –ù–ò–ó–ö–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨")
        print(f"   üìä –í—Å–µ–≥–æ {len(df_pre_activity):,} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ {ANALYSIS_WINDOW_HOURS}—á")
        print(f"   üí° –ù–∞ —Ñ–æ–Ω–µ 1,063 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 1 —á–∞—Å - –æ—á–µ–≤–∏–¥–Ω–∞—è –∞–Ω–æ–º–∞–ª–∏—è")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–∏
    if len(df_pre_activity) > 0:
        df_pre_activity['datetime'] = pd.to_datetime(df_pre_activity['block_time'], unit='s')
        
        # –ò—â–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        df_pre_activity['hour'] = df_pre_activity['datetime'].dt.hour
        hourly_activity = df_pre_activity.groupby('hour').size()
        
        if hourly_activity.max() > 5:  # –ï—Å–ª–∏ –≤ –∫–∞–∫–æ–π-—Ç–æ —á–∞—Å –±—ã–ª–æ –±–æ–ª—å—à–µ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            peak_hour = hourly_activity.idxmax()
            peak_count = hourly_activity.max()
            triggers_found.append("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
            print(f"üö® –¢–†–ò–ì–ì–ï–† #3: –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–ò–ö")
            print(f"   ‚è∞ –í {peak_hour}:00 –±—ã–ª–æ {peak_count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            print(f"   üí° –í–æ–∑–º–æ–∂–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∞–∑–∞")
    
    # –†–µ–∑—é–º–µ
    print(f"\nüìã –†–ï–ó–Æ–ú–ï –ü–û–ò–°–ö–ê –¢–†–ò–ì–ì–ï–†–û–í:")
    if triggers_found:
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {len(triggers_found)}")
        for i, trigger in enumerate(triggers_found, 1):
            print(f"      {i}. {trigger}")
    else:
        print(f"   ‚ö†Ô∏è –Ø–≤–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
    
    return triggers_found

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–µ–¥–≤–µ—Å—Ç–Ω–∏–∫–æ–≤"""
    print("üéØ –§–ê–ó–ê 2.2.1.1: –ü–û–ò–°–ö –°–ò–ì–ù–ê–õ–û–í-–ü–†–ï–î–í–ï–°–¢–ù–ò–ö–û–í")
    print("=" * 60)
    print(f"üìÖ –¶–µ–ª—å: –ù–∞–π—Ç–∏ —Ç—Ä–∏–≥–≥–µ—Ä –î–û –∞—Ç–∞–∫–∏ 1 –∞–ø—Ä–µ–ª—è 13:00")
    print(f"üìä –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑
    df_pre_activity, df_ml_pre, attackers = analyze_pre_attack_period()
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤
    analyze_immediate_precursors()
    
    # –ü–æ–∏—Å–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    triggers = search_for_triggers(df_pre_activity, attackers)
    
    print(f"\nüéâ –ê–ù–ê–õ–ò–ó –ü–†–ï–î–í–ï–°–¢–ù–ò–ö–û–í –ó–ê–í–ï–†–®–ï–ù")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {'–ù–∞–π–¥–µ–Ω—ã —Å–∏–≥–Ω–∞–ª—ã' if triggers else '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∑–∞—Ç–∏—à—å–µ –ø–µ—Ä–µ–¥ –±—É—Ä–µ–π'}")
    print(f"üéØ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –ü–æ–º–∏–Ω—É—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–∞—Å–∞ –∞—Ç–∞–∫–∏ (13:00-13:59)")

if __name__ == "__main__":
    main() 