#!/usr/bin/env python3
"""
üìä –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–∞—Å–∞ –∞—Ç–∞–∫–∏ - –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
"""

import sqlite3
import pandas as pd
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN_ADDRESS = 'AL2HhMQLkJqeeK5w4akoogzyYBZ6GYkBfxjscCf2L2yC'
ATTACK_HOUR_START = '2025-04-01 13:00:00'
ATTACK_HOUR_END = '2025-04-01 13:59:59'
DB_PATH = 'db/solana_db.sqlite'

def main():
    print("üéØ –£–ü–†–û–©–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –ß–ê–°–ê –ê–¢–ê–ö–ò")
    print("=" * 40)
    
    conn = sqlite3.connect(DB_PATH)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ —á–∞—Å –∞—Ç–∞–∫–∏
    query = """
    SELECT 
        signature,
        block_time,
        fee_payer,
        transaction_type,
        datetime(block_time, 'unixepoch') as readable_time,
        strftime('%M', datetime(block_time, 'unixepoch')) as minute,
        strftime('%S', datetime(block_time, 'unixepoch')) as second
    FROM transactions 
    WHERE source_query_address = ?
      AND datetime(block_time, 'unixepoch') BETWEEN ? AND ?
    ORDER BY block_time
    """
    
    df = pd.read_sql_query(query, conn, params=[TOKEN_ADDRESS, ATTACK_HOUR_START, ATTACK_HOUR_END])
    
    print(f"üìä –ë–ê–ó–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(df):,}")
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤: {df['fee_payer'].nunique()}")
    print(f"   –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {df['readable_time'].min()} - {df['readable_time'].max()}")
    
    # –ü–µ—Ä–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è (—Ç—Ä–∏–≥–≥–µ—Ä)
    if len(df) > 0:
        first_tx = df.iloc[0]
        print(f"\nüö® –ü–ï–†–í–ê–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø (–¢–†–ò–ì–ì–ï–†):")
        print(f"   ‚è∞ –í—Ä–µ–º—è: {first_tx['readable_time']}")
        print(f"   üëõ –ö–æ—à–µ–ª–µ–∫: {first_tx['fee_payer'] or 'Unknown'}")
        print(f"   üîó –°–∏–≥–Ω–∞—Ç—É—Ä–∞: {first_tx['signature']}")
    
    # –ü–æ–º–∏–Ω—É—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    minute_counts = df.groupby('minute').size().reset_index(name='count')
    print(f"\nüìà –ü–û–ú–ò–ù–£–¢–ù–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï:")
    print(f"{'–ú–∏–Ω—É—Ç–∞':<8} {'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π':<12} {'–°—Ç–∞—Ç—É—Å':<15}")
    print("-" * 40)
    
    max_count = 0
    peak_minute = None
    
    for _, row in minute_counts.iterrows():
        minute = row['minute']
        count = row['count']
        
        if count > max_count:
            max_count = count
            peak_minute = minute
        
        status = "üî• –ü–ò–ö–û–í–ê–Ø" if count > 50 else "üìà –ê–∫—Ç–∏–≤–Ω–∞—è" if count > 10 else "üìä –ù–∏–∑–∫–∞—è"
        print(f"13:{minute:<6} {count:<12} {status:<15}")
    
    print(f"\nüéØ –ö–õ–Æ–ß–ï–í–´–ï –ù–ê–•–û–î–ö–ò:")
    print(f"   üî• –ü–∏–∫–æ–≤–∞—è –º–∏–Ω—É—Ç–∞: 13:{peak_minute} ({max_count:,} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)")
    print(f"   üìä –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è: {max_count/len(df)*100:.1f}% —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –ø–∏–∫–æ–≤—É—é –º–∏–Ω—É—Ç—É")
    
    # –¢–æ–ø –∫–æ—à–µ–ª—å–∫–æ–≤
    wallet_activity = df['fee_payer'].value_counts().head(5)
    print(f"\nüë• –¢–û–ü-5 –ê–ö–¢–ò–í–ù–´–• –ö–û–®–ï–õ–¨–ö–û–í:")
    for i, (wallet, count) in enumerate(wallet_activity.items(), 1):
        percentage = count / len(df) * 100
        wallet_display = wallet[:25] + "..." if wallet and len(wallet) > 25 else (wallet or "Unknown")
        print(f"   {i}. {wallet_display}: {count:,} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ({percentage:.1f}%)")
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    df['datetime'] = pd.to_datetime(df['block_time'], unit='s')
    df['time_diff'] = df['datetime'].diff().dt.total_seconds()
    intervals = df['time_diff'].dropna()
    
    if len(intervals) > 0:
        print(f"\n‚è±Ô∏è –í–†–ï–ú–ï–ù–ù–´–ï –ò–ù–¢–ï–†–í–ê–õ–´:")
        print(f"   –ú–µ–¥–∏–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {intervals.median():.1f} —Å–µ–∫—É–Ω–¥")
        print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {intervals.min():.1f} —Å–µ–∫—É–Ω–¥")
        rapid_count = (intervals < 5).sum()
        print(f"   –ë—ã—Å—Ç—Ä—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (<5 —Å–µ–∫): {rapid_count} ({rapid_count/len(intervals)*100:.1f}%)")
    
    # ML —Å–æ–±—ã—Ç–∏—è
    ml_query = """
    SELECT 
        e.signature,
        e.event_type,
        e.from_wallet,
        e.to_wallet,
        e.from_amount,
        e.to_amount,
        datetime(e.block_time, 'unixepoch') as readable_time
    FROM ml_ready_events e
    JOIN transactions t ON e.signature = t.signature
    WHERE t.source_query_address = ?
      AND datetime(e.block_time, 'unixepoch') BETWEEN ? AND ?
    ORDER BY e.block_time
    """
    
    df_ml = pd.read_sql_query(ml_query, conn, params=[TOKEN_ADDRESS, ATTACK_HOUR_START, ATTACK_HOUR_END])
    
    print(f"\nüé≠ ML –°–û–ë–´–¢–ò–Ø:")
    print(f"   –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {len(df_ml):,}")
    
    if len(df_ml) > 0:
        event_types = df_ml['event_type'].value_counts()
        print(f"   –¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π:")
        for event_type, count in event_types.items():
            print(f"      {event_type}: {count:,}")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—ä–µ–º–æ–≤
        df_ml['volume'] = pd.to_numeric(df_ml['from_amount'], errors='coerce')
        volumes = df_ml['volume'].dropna()
        if len(volumes) > 0:
            print(f"   –û–±—â–∏–π –æ–±—ä–µ–º: {volumes.sum():,.0f} —Ç–æ–∫–µ–Ω–æ–≤")
            print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞: {volumes.max():,.0f} —Ç–æ–∫–µ–Ω–æ–≤")
    
    conn.close()
    
    print(f"\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
    print(f"üí° –†–µ–∑—É–ª—å—Ç–∞—Ç: –í—ã—è–≤–ª–µ–Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞—Ç–∞–∫–∞ —Å —á–µ—Ç–∫–∏–º —Ç—Ä–∏–≥–≥–µ—Ä–æ–º –∏ –ø–∏–∫–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é")

if __name__ == "__main__":
    main() 