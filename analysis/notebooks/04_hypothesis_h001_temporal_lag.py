#!/usr/bin/env python3
"""
üß† –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑—ã H-001: –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ª–∞–≥ –º–µ–∂–¥—É —Ç—Ä–∏–≥–≥–µ—Ä–æ–º –∏ –¥–∞–º–ø–æ–º

–¶–ï–õ–¨: –ù–∞–π—Ç–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏–µ–º-—Ç—Ä–∏–≥–≥–µ—Ä–æ–º –∏ –¥–∞–º–ø–æ–º
–ü–û–î–•–û–î: –ê–Ω–∞–ª–∏–∑ –∫–∞—É–∑–∞–ª—å–Ω—ã—Ö —Ü–µ–ø–æ—á–µ–∫ –Ω–∞ –º–∏–∫—Ä–æ—É—Ä–æ–≤–Ω–µ —Å–æ–±—ã—Ç–∏–π
–û–ñ–ò–î–ê–ù–ò–ï: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ < 10% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –ª–∞–≥–∞
"""

import sqlite3
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
import warnings
warnings.filterwarnings('ignore')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DB_PATH = 'db/solana_db.sqlite'
TOKEN_ADDRESSES = [
    'AL2HhMQLkJqeeK5w4akoogzyYBZ6GYkBfxjscCf2L2yC',
    'AGmXzgFQw8bLtsJvr5dgnHtyP6rP6GLwmZwgVqjFL6Q8'
]

# –ü–æ—Ä–æ–≥–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
SOL_BUY_THRESHOLD = 0.5 * 1e9  # 0.5 SOL –≤ lamports
TOKEN_DUMP_THRESHOLD = 1_000_000  # 1–ú —Ç–æ–∫–µ–Ω–æ–≤ –º–∏–Ω–∏–º—É–º –¥–ª—è –¥–∞–º–ø–∞

def get_token_events(token_address):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    conn = sqlite3.connect(DB_PATH)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    transactions_query = """
    SELECT 
        signature,
        block_time,
        fee_payer,
        transaction_type,
        datetime(block_time, 'unixepoch') as readable_time
    FROM transactions 
    WHERE source_query_address = ?
    ORDER BY block_time
    """
    
    df_transactions = pd.read_sql_query(
        transactions_query, 
        conn, 
        params=[token_address]
    )
    
    # ML —Å–æ–±—ã—Ç–∏—è (—Å–≤–∞–ø—ã, —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—ã)
    ml_events_query = """
    SELECT 
        e.signature,
        e.block_time,
        e.event_type,
        e.from_wallet,
        e.to_wallet,
        e.from_amount,
        e.to_amount,
        e.token_a_mint,
        e.token_b_mint,
        datetime(e.block_time, 'unixepoch') as readable_time
    FROM ml_ready_events e
    JOIN transactions t ON e.signature = t.signature
    WHERE t.source_query_address = ?
    ORDER BY e.block_time
    """
    
    df_ml_events = pd.read_sql_query(
        ml_events_query,
        conn,
        params=[token_address]
    )
    
    conn.close()
    return df_transactions, df_ml_events

def find_creation_event(df_ml_events, token_address):
    """–ù–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ (–ø–µ—Ä–≤—É—é –∫—Ä—É–ø–Ω—É—é –ø–æ–∫—É–ø–∫—É –∑–∞ SOL)"""
    if len(df_ml_events) == 0:
        return None
    
    # –ò—â–µ–º —Å–≤–∞–ø—ã, –≥–¥–µ –ø–æ–∫—É–ø–∞—é—Ç –Ω–∞—à —Ç–æ–∫–µ–Ω –∑–∞ SOL
    # token_b_mint = –Ω–∞—à —Ç–æ–∫–µ–Ω (—Ç–æ —á—Ç–æ –ø–æ–ª—É—á–∞–µ–º)
    # token_a_mint = SOL (—Ç–æ —á—Ç–æ –æ—Ç–¥–∞–µ–º)
    buys = df_ml_events[
        (df_ml_events['token_b_mint'] == token_address) &
        (df_ml_events['event_type'].isin(['SWAP', 'swap'])) &
        (pd.to_numeric(df_ml_events['from_amount'], errors='coerce') >= SOL_BUY_THRESHOLD)
    ].copy()
    
    if len(buys) > 0:
        buys['from_amount_numeric'] = pd.to_numeric(buys['from_amount'], errors='coerce')
        buys = buys.sort_values('block_time')
        return buys.iloc[0]
    
    return None

def find_first_dump(df_ml_events, token_address):
    """–ù–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π –∫—Ä—É–ø–Ω—ã–π –¥–∞–º–ø —Ç–æ–∫–µ–Ω–∞"""
    if len(df_ml_events) == 0:
        return None
    
    # –ò—â–µ–º —Å–≤–∞–ø—ã, –≥–¥–µ –ø—Ä–æ–¥–∞—é—Ç –Ω–∞—à —Ç–æ–∫–µ–Ω
    # token_a_mint = –Ω–∞—à —Ç–æ–∫–µ–Ω (—Ç–æ —á—Ç–æ –æ—Ç–¥–∞–µ–º)
    # token_b_mint = SOL –∏–ª–∏ –¥—Ä—É–≥–æ–µ (—Ç–æ —á—Ç–æ –ø–æ–ª—É—á–∞–µ–º)
    dumps = df_ml_events[
        (df_ml_events['token_a_mint'] == token_address) &
        (df_ml_events['event_type'].isin(['SWAP', 'swap'])) &
        (pd.to_numeric(df_ml_events['from_amount'], errors='coerce') >= TOKEN_DUMP_THRESHOLD)
    ].copy()
    
    if len(dumps) > 0:
        dumps['from_amount_numeric'] = pd.to_numeric(dumps['from_amount'], errors='coerce')
        dumps = dumps.sort_values('block_time')
        return dumps.iloc[0]
    
    return None

def analyze_temporal_lag(token_address):
    """–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ª–∞–≥–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞: {token_address[:20]}...")
    
    df_transactions, df_ml_events = get_token_events(token_address)
    
    print(f"   üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(df_transactions):,} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, {len(df_ml_events):,} ML —Å–æ–±—ã—Ç–∏–π")
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
    creation_event = find_creation_event(df_ml_events, token_address)
    first_dump = find_first_dump(df_ml_events, token_address)
    
    if creation_event is None:
        print("   ‚ùå –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return None
    
    if first_dump is None:
        print("   ‚ùå –ü–µ—Ä–≤—ã–π –¥–∞–º–ø –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ª–∞–≥
    creation_time = datetime.fromtimestamp(creation_event['block_time'])
    dump_time = datetime.fromtimestamp(first_dump['block_time'])
    time_lag = (dump_time - creation_time).total_seconds()
    
    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–∞—Ä–∞ —Å–æ–±—ã—Ç–∏–π:")
    print(f"      üéØ –°–æ–∑–¥–∞–Ω–∏–µ: {creation_time.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"      üí£ –ü–µ—Ä–≤—ã–π –¥–∞–º–ø: {dump_time.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"      ‚è±Ô∏è –í—Ä–µ–º–µ–Ω–Ω–æ–π –ª–∞–≥: {time_lag:,.0f} —Å–µ–∫—É–Ω–¥ ({time_lag/60:.1f} –º–∏–Ω—É—Ç)")
    
    # –î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏–π
    creation_amount = float(creation_event['from_amount']) / 1e9  # SOL
    dump_amount = float(first_dump['from_amount']) / 1e6  # –ú–ª–Ω —Ç–æ–∫–µ–Ω–æ–≤
    
    print(f"      üí∞ –†–∞–∑–º–µ—Ä —Å–æ–∑–¥–∞—é—â–µ–π –ø–æ–∫—É–ø–∫–∏: {creation_amount:.2f} SOL")
    print(f"      üí∞ –†–∞–∑–º–µ—Ä –¥–∞–º–ø–∞: {dump_amount:.1f}–ú —Ç–æ–∫–µ–Ω–æ–≤")
    
    return {
        'token': token_address,
        'creation_time': creation_time,
        'dump_time': dump_time,
        'time_lag_seconds': time_lag,
        'time_lag_minutes': time_lag / 60,
        'creation_amount_sol': creation_amount,
        'dump_amount_tokens': dump_amount,
        'creation_wallet': creation_event['to_wallet'],
        'dump_wallet': first_dump['from_wallet'],
        'same_wallet': creation_event['to_wallet'] == first_dump['from_wallet']
    }

def statistical_analysis(results):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ª–∞–≥–æ–≤"""
    if len(results) < 2:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    df = pd.DataFrame(results)
    
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –í–†–ï–ú–ï–ù–ù–´–• –õ–ê–ì–û–í")
    print("=" * 50)
    
    lags_seconds = df['time_lag_seconds']
    lags_minutes = df['time_lag_minutes']
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"üìà –û–°–ù–û–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö):")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ: {lags_seconds.mean():,.0f} —Å–µ–∫ ({lags_seconds.mean()/60:.1f} –º–∏–Ω)")
    print(f"   –ú–µ–¥–∏–∞–Ω–∞: {lags_seconds.median():,.0f} —Å–µ–∫ ({lags_seconds.median()/60:.1f} –º–∏–Ω)")
    print(f"   –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {lags_seconds.std():,.0f} —Å–µ–∫")
    print(f"   –ú–∏–Ω–∏–º—É–º: {lags_seconds.min():,.0f} —Å–µ–∫ ({lags_seconds.min()/60:.1f} –º–∏–Ω)")
    print(f"   –ú–∞–∫—Å–∏–º—É–º: {lags_seconds.max():,.0f} —Å–µ–∫ ({lags_seconds.max()/60:.1f} –º–∏–Ω)")
    
    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏
    cv = lags_seconds.std() / lags_seconds.mean() * 100
    print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏: {cv:.1f}%")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑—ã H-001
    print(f"\nüéØ –ü–†–û–í–ï–†–ö–ê –ì–ò–ü–û–¢–ï–ó–´ H-001:")
    
    # –ö—Ä–∏—Ç–µ—Ä–∏–π 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ < 10% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ
    criterion_1 = cv < 10
    print(f"   ‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–π 1 (CV < 10%): {'–í–´–ü–û–õ–ù–ï–ù' if criterion_1 else '–ù–ï –í–´–ü–û–õ–ù–ï–ù'} (CV = {cv:.1f}%)")
    
    # –ö—Ä–∏—Ç–µ—Ä–∏–π 2: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —É–∑–∫–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    median_lag = lags_seconds.median()
    tolerance = 300  # ¬±5 –º–∏–Ω—É—Ç
    within_tolerance = ((lags_seconds >= median_lag - tolerance) & 
                       (lags_seconds <= median_lag + tolerance)).sum()
    percentage_within = within_tolerance / len(lags_seconds) * 100
    criterion_2 = percentage_within >= 70
    
    print(f"   ‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–π 2 (70% –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±5 –º–∏–Ω): {'–í–´–ü–û–õ–ù–ï–ù' if criterion_2 else '–ù–ï –í–´–ü–û–õ–ù–ï–ù'} ({percentage_within:.1f}%)")
    
    # –ö—Ä–∏—Ç–µ—Ä–∏–π 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å (—Ç–µ—Å—Ç –®–∞–ø–∏—Ä–æ-–£–∏–ª–∫–∞ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å)
    if len(lags_seconds) >= 3:
        statistic, p_value = stats.shapiro(lags_seconds)
        criterion_3 = p_value > 0.05  # –ï—Å–ª–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, —Ç–æ –Ω–µ —Å–ª—É—á–∞–π–Ω–æ–µ
        print(f"   ‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–π 3 (–Ω–µ —Å–ª—É—á–∞–π–Ω–æ–µ): {'–í–´–ü–û–õ–ù–ï–ù' if criterion_3 else '–ù–ï –í–´–ü–û–õ–ù–ï–ù'} (p = {p_value:.3f})")
    else:
        criterion_3 = False
        print(f"   ‚ùå –ö—Ä–∏—Ç–µ—Ä–∏–π 3: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç
    all_criteria = criterion_1 and criterion_2 and criterion_3
    print(f"\nüèÜ –ò–¢–û–ì–û–í–´–ô –í–ï–†–î–ò–ö–¢:")
    if all_criteria:
        print(f"   ‚úÖ –ì–ò–ü–û–¢–ï–ó–ê H-001 –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!")
        print(f"   üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω")
    else:
        print(f"   ‚ùå –ì–∏–ø–æ—Ç–µ–∑–∞ H-001 —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        print(f"   üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, —Ä–∞–∑–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã, –∏–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π")
    
    return df

def create_visualizations(df):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    if len(df) < 2:
        return
    
    fig, axes = plt.subplots(2, 2, figsize=(15, 10))
    fig.suptitle('–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ª–∞–≥–æ–≤ –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏ –¥–∞–º–ø–æ–º —Ç–æ–∫–µ–Ω–æ–≤', fontsize=16)
    
    # 1. –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ª–∞–≥–æ–≤
    axes[0, 0].hist(df['time_lag_minutes'], bins=max(3, len(df)), alpha=0.7, color='skyblue', edgecolor='black')
    axes[0, 0].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ª–∞–≥–æ–≤')
    axes[0, 0].set_xlabel('–õ–∞–≥ (–º–∏–Ω—É—Ç—ã)')
    axes[0, 0].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤')
    axes[0, 0].grid(True, alpha=0.3)
    
    # 2. –í—Ä–µ–º–µ–Ω–Ω–∞—è –ª–∏–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
    for i, row in df.iterrows():
        axes[0, 1].barh(i, row['time_lag_minutes'], color='orange', alpha=0.7)
        axes[0, 1].text(row['time_lag_minutes'] + 1, i, f"{row['time_lag_minutes']:.0f}–º", va='center')
    
    axes[0, 1].set_title('–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ª–∞–≥–∏ –ø–æ —Ç–æ–∫–µ–Ω–∞–º')
    axes[0, 1].set_xlabel('–õ–∞–≥ (–º–∏–Ω—É—Ç—ã)')
    axes[0, 1].set_ylabel('–¢–æ–∫–µ–Ω #')
    axes[0, 1].grid(True, alpha=0.3)
    
    # 3. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∫—É–ø–∫–∏ –∏ –ª–∞–≥–∞
    axes[1, 0].scatter(df['creation_amount_sol'], df['time_lag_minutes'], alpha=0.7, s=100)
    axes[1, 0].set_title('–†–∞–∑–º–µ—Ä —Å–æ–∑–¥–∞—é—â–µ–π –ø–æ–∫—É–ø–∫–∏ vs –í—Ä–µ–º–µ–Ω–Ω–æ–π –ª–∞–≥')
    axes[1, 0].set_xlabel('–†–∞–∑–º–µ—Ä –ø–æ–∫—É–ø–∫–∏ (SOL)')
    axes[1, 0].set_ylabel('–õ–∞–≥ (–º–∏–Ω—É—Ç—ã)')
    axes[1, 0].grid(True, alpha=0.3)
    
    # 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º
    same_wallet_counts = df['same_wallet'].value_counts()
    axes[1, 1].pie(same_wallet_counts.values, labels=['–†–∞–∑–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏', '–û–¥–∏–Ω –∫–æ—à–µ–ª–µ–∫'], autopct='%1.1f%%')
    axes[1, 1].set_title('–°–æ–∑–¥–∞—Ç–µ–ª—å = –î–∞–º–ø–µ—Ä?')
    
    plt.tight_layout()
    plt.show()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–∏–ø–æ—Ç–µ–∑—ã H-001"""
    print("üß† –ü–†–û–í–ï–†–ö–ê –ì–ò–ü–û–¢–ï–ó–´ H-001: –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ô –í–†–ï–ú–ï–ù–ù–û–ô –õ–ê–ì")
    print("=" * 60)
    print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(TOKEN_ADDRESSES)} —Ç–æ–∫–µ–Ω–æ–≤")
    print(f"üéØ –ò—â–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã")
    
    results = []
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    for token_address in TOKEN_ADDRESSES:
        result = analyze_temporal_lag(token_address)
        if result:
            results.append(result)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    if results:
        print(f"\nüìã –°–û–ë–†–ê–ù–û –î–ê–ù–ù–´–•: {len(results)} —Ç–æ–∫–µ–Ω–æ–≤ —Å –ø–∞—Ä–∞–º–∏ —Å–æ–±—ã—Ç–∏–π")
        df_results = statistical_analysis(results)
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"\nüìä –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print("-" * 100)
        for i, result in enumerate(results, 1):
            print(f"{i}. {result['token'][:20]}...")
            print(f"   ‚è±Ô∏è –õ–∞–≥: {result['time_lag_minutes']:.1f} –º–∏–Ω")
            print(f"   üí∞ –ü–æ–∫—É–ø–∫–∞: {result['creation_amount_sol']:.2f} SOL")
            print(f"   üí£ –î–∞–º–ø: {result['dump_amount_tokens']:.1f}–ú —Ç–æ–∫–µ–Ω–æ–≤")
            print(f"   üëõ –¢–æ—Ç –∂–µ –∫–æ—à–µ–ª–µ–∫: {'–î–∞' if result['same_wallet'] else '–ù–µ—Ç'}")
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        create_visualizations(df_results)
        
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞—Ä—ã —Å–æ–±—ã—Ç–∏–π –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞")
        print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   - –ü–æ—Ä–æ–≥–∏ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–µ")
        print("   - –î–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ")
        print("   - –°–æ–±—ã—Ç–∏—è –∏–º–µ—é—Ç –¥—Ä—É–≥—É—é –ø—Ä–∏—Ä–æ–¥—É")
    
    print(f"\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–∏–ø–æ—Ç–µ–∑—ã
    if len(results) >= 2:
        print(f"üìù –û–±–Ω–æ–≤–∏—Ç–µ —Ñ–∞–π–ª analysis/hypotheses.md:")
        print(f"   –°—Ç–∞—Ç—É—Å H-001: {'‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞' if len(results) > 0 else 'üîÑ –¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏'}")

if __name__ == "__main__":
    main() 