#!/usr/bin/env python3
"""
üß† –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑—ã H-001: –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ª–∞–≥ –º–µ–∂–¥—É —Ç—Ä–∏–≥–≥–µ—Ä–æ–º –∏ –¥–∞–º–ø–æ–º
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ scipy
"""

import sqlite3
import pandas as pd
import numpy as np
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DB_PATH = 'db/solana_db.sqlite'
TOKEN_ADDRESSES = [
    'AL2HhMQLkJqeeK5w4akoogzyYBZ6GYkBfxjscCf2L2yC',
    'AGmXzgFQw8bLtsJvr5dgnHtyP6rP6GLwmZwgVqjFL6Q8'
]

def get_token_events(token_address):
    """–ü–æ–ª—É—á–∏—Ç—å ML —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞"""
    conn = sqlite3.connect(DB_PATH)
    
    ml_events_query = """
    SELECT 
        e.signature,
        e.block_time,
        e.event_type,
        e.from_wallet,
        e.to_wallet,
        e.from_amount,
        e.to_amount,
        e.token_a_mint,
        e.token_b_mint,
        datetime(e.block_time, 'unixepoch') as readable_time
    FROM ml_ready_events e
    JOIN transactions t ON e.signature = t.signature
    WHERE t.source_query_address = ?
    ORDER BY e.block_time
    """
    
    df_ml_events = pd.read_sql_query(ml_events_query, conn, params=[token_address])
    conn.close()
    return df_ml_events

def find_creation_and_dump(df_ml_events, token_address):
    """–ù–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø–µ—Ä–≤—ã–π –¥–∞–º–ø"""
    print(f"   üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(df_ml_events)} ML —Å–æ–±—ã—Ç–∏–π")
    
    if len(df_ml_events) == 0:
        return None, None
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º amount –≤ —á–∏—Å–ª–∞
    df_ml_events['from_amount_num'] = pd.to_numeric(df_ml_events['from_amount'], errors='coerce')
    df_ml_events['to_amount_num'] = pd.to_numeric(df_ml_events['to_amount'], errors='coerce')
    
    # –ò—â–µ–º –ø–µ—Ä–≤—É—é –∫—Ä—É–ø–Ω—É—é –ø–æ–∫—É–ø–∫—É (–ø–æ–ª—É—á–∞–µ–º –Ω–∞—à —Ç–æ–∫–µ–Ω)
    buys = df_ml_events[
        (df_ml_events['token_b_mint'] == token_address) &
        (df_ml_events['from_amount_num'] >= 500_000_000)  # 0.5 SOL –≤ lamports
    ].copy()
    
    creation_event = None
    if len(buys) > 0:
        creation_event = buys.sort_values('block_time').iloc[0]
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è: {creation_event['readable_time']}")
        print(f"      üí∞ –†–∞–∑–º–µ—Ä: {creation_event['from_amount_num']/1e9:.2f} SOL")
    
    # –ò—â–µ–º –ø–µ—Ä–≤—ã–π –∫—Ä—É–ø–Ω—ã–π –¥–∞–º–ø (–æ—Ç–¥–∞–µ–º –Ω–∞—à —Ç–æ–∫–µ–Ω)
    dumps = df_ml_events[
        (df_ml_events['token_a_mint'] == token_address) &
        (df_ml_events['from_amount_num'] >= 1_000_000)  # 1–ú —Ç–æ–∫–µ–Ω–æ–≤
    ].copy()
    
    dump_event = None
    if len(dumps) > 0:
        dump_event = dumps.sort_values('block_time').iloc[0]
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω –ø–µ—Ä–≤—ã–π –¥–∞–º–ø: {dump_event['readable_time']}")
        print(f"      üí£ –†–∞–∑–º–µ—Ä: {dump_event['from_amount_num']/1e6:.1f}–ú —Ç–æ–∫–µ–Ω–æ–≤")
    
    return creation_event, dump_event

def analyze_token(token_address):
    """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞: {token_address[:25]}...")
    
    df_events = get_token_events(token_address)
    creation, dump = find_creation_and_dump(df_events, token_address)
    
    if creation is None or dump is None:
        print(f"   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–∞—Ä–∞ —Å–æ–±—ã—Ç–∏–π (—Å–æ–∑–¥–∞–Ω–∏–µ/–¥–∞–º–ø)")
        return None
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ª–∞–≥
    creation_time = datetime.fromtimestamp(creation['block_time'])
    dump_time = datetime.fromtimestamp(dump['block_time'])
    lag_seconds = (dump_time - creation_time).total_seconds()
    lag_minutes = lag_seconds / 60
    
    print(f"   ‚è±Ô∏è –í—Ä–µ–º–µ–Ω–Ω–æ–π –ª–∞–≥: {lag_seconds:.0f} —Å–µ–∫—É–Ω–¥ ({lag_minutes:.1f} –º–∏–Ω—É—Ç)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—à–µ–ª—å–∫–∏
    same_wallet = creation['to_wallet'] == dump['from_wallet']
    print(f"   üëõ –¢–æ—Ç –∂–µ –∫–æ—à–µ–ª–µ–∫: {'–î–∞' if same_wallet else '–ù–µ—Ç'}")
    
    return {
        'token': token_address,
        'creation_time': creation_time,
        'dump_time': dump_time,
        'lag_seconds': lag_seconds,
        'lag_minutes': lag_minutes,
        'creation_amount': creation['from_amount_num'] / 1e9,  # SOL
        'dump_amount': dump['from_amount_num'] / 1e6,  # –ú–ª–Ω —Ç–æ–∫–µ–Ω–æ–≤
        'same_wallet': same_wallet,
        'creation_wallet': creation['to_wallet'],
        'dump_wallet': dump['from_wallet']
    }

def analyze_results(results):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    if len(results) < 2:
        print("\n‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó")
    print("=" * 40)
    
    lags = [r['lag_seconds'] for r in results]
    lags_array = np.array(lags)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    mean_lag = np.mean(lags_array)
    median_lag = np.median(lags_array)
    std_lag = np.std(lags_array)
    min_lag = np.min(lags_array)
    max_lag = np.max(lags_array)
    
    print(f"üìà –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ª–∞–≥–∏ (—Å–µ–∫—É–Ω–¥—ã):")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ: {mean_lag:,.0f} —Å–µ–∫ ({mean_lag/60:.1f} –º–∏–Ω)")
    print(f"   –ú–µ–¥–∏–∞–Ω–∞: {median_lag:,.0f} —Å–µ–∫ ({median_lag/60:.1f} –º–∏–Ω)")
    print(f"   –°—Ç–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {std_lag:,.0f} —Å–µ–∫")
    print(f"   –î–∏–∞–ø–∞–∑–æ–Ω: {min_lag:,.0f} - {max_lag:,.0f} —Å–µ–∫")
    
    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏
    cv = std_lag / mean_lag * 100
    print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏: {cv:.1f}%")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –≥–∏–ø–æ—Ç–µ–∑—ã H-001
    print(f"\nüéØ –ü–†–û–í–ï–†–ö–ê –ì–ò–ü–û–¢–ï–ó–´ H-001:")
    
    # –ö—Ä–∏—Ç–µ—Ä–∏–π 1: CV < 10%
    criterion_1 = cv < 10
    print(f"   ‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–π 1 (CV < 10%): {'–í–´–ü–û–õ–ù–ï–ù' if criterion_1 else '–ù–ï –í–´–ü–û–õ–ù–ï–ù'} (CV = {cv:.1f}%)")
    
    # –ö—Ä–∏—Ç–µ—Ä–∏–π 2: 70% –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±5 –º–∏–Ω—É—Ç –æ—Ç –º–µ–¥–∏–∞–Ω—ã
    tolerance = 300  # 5 –º–∏–Ω—É—Ç
    within_tolerance = sum(1 for lag in lags if abs(lag - median_lag) <= tolerance)
    percentage_within = within_tolerance / len(lags) * 100
    criterion_2 = percentage_within >= 70
    
    print(f"   ‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–π 2 (70% –≤ ¬±5 –º–∏–Ω): {'–í–´–ü–û–õ–ù–ï–ù' if criterion_2 else '–ù–ï –í–´–ü–û–õ–ù–ï–ù'} ({percentage_within:.1f}%)")
    
    # –ö—Ä–∏—Ç–µ—Ä–∏–π 3: –†–∞–∑–±—Ä–æ—Å < 50% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ
    range_lag = max_lag - min_lag
    criterion_3 = range_lag < (mean_lag * 0.5)
    print(f"   ‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–π 3 (—Ä–∞–∑–±—Ä–æ—Å < 50%): {'–í–´–ü–û–õ–ù–ï–ù' if criterion_3 else '–ù–ï –í–´–ü–û–õ–ù–ï–ù'}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç
    all_criteria = criterion_1 and criterion_2 and criterion_3
    
    print(f"\nüèÜ –ò–¢–û–ì–û–í–´–ô –í–ï–†–î–ò–ö–¢:")
    if all_criteria:
        print(f"   ‚úÖ –ì–ò–ü–û–¢–ï–ó–ê H-001 –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!")
        print(f"   üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω: {mean_lag/60:.1f} ¬± {std_lag/60:.1f} –º–∏–Ω—É—Ç")
    elif len(results) == 2 and cv < 20:
        print(f"   üîÑ –ì–ò–ü–û–¢–ï–ó–ê H-001 –ß–ê–°–¢–ò–ß–ù–û –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê")
        print(f"   üí° –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞")
    else:
        print(f"   ‚ùå –ì–∏–ø–æ—Ç–µ–∑–∞ H-001 –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
        print(f"   üí° –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß† –ü–†–û–í–ï–†–ö–ê –ì–ò–ü–û–¢–ï–ó–´ H-001: –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ô –í–†–ï–ú–ï–ù–ù–û–ô –õ–ê–ì")
    print("=" * 60)
    print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(TOKEN_ADDRESSES)} —Ç–æ–∫–µ–Ω–æ–≤")
    
    results = []
    
    for token_address in TOKEN_ADDRESSES:
        result = analyze_token(token_address)
        if result:
            results.append(result)
    
    print(f"\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
    print("=" * 50)
    
    if results:
        for i, result in enumerate(results, 1):
            print(f"\n{i}. –¢–æ–∫–µ–Ω {result['token'][:25]}...")
            print(f"   üéØ –°–æ–∑–¥–∞–Ω–∏–µ: {result['creation_time'].strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"   üí£ –î–∞–º–ø: {result['dump_time'].strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"   ‚è±Ô∏è –õ–∞–≥: {result['lag_minutes']:.1f} –º–∏–Ω—É—Ç")
            print(f"   üí∞ –ü–æ–∫—É–ø–∫–∞: {result['creation_amount']:.2f} SOL")
            print(f"   üí£ –î–∞–º–ø: {result['dump_amount']:.1f}–ú —Ç–æ–∫–µ–Ω–æ–≤")
            print(f"   üëõ –¢–æ—Ç –∂–µ –∫–æ—à–µ–ª–µ–∫: {'–î–∞' if result['same_wallet'] else '–ù–µ—Ç'}")
        
        analyze_results(results)
    else:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –ø–∞—Ä—ã —Å–æ–±—ã—Ç–∏–π")
        print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   - –ü–æ—Ä–æ–≥–∏ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–µ")
        print("   - –°–æ–±—ã—Ç–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("   - –î–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ")
    
    print(f"\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")

if __name__ == "__main__":
    main() 