#!/usr/bin/env python3
"""
üìä –§–∞–∑–∞ 2.2.1.2: –ü–æ–º–∏–Ω—É—Ç–Ω–∞—è —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è "—á–∞—Å–∞ –∞—Ç–∞–∫–∏"

–¶–ï–õ–¨: –ü–æ–Ω—è—Ç—å –º–µ—Ö–∞–Ω–∏–∫—É –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
–ü–ï–†–ò–û–î: 1 –∞–ø—Ä–µ–ª—è 2025 –≥. —Å 13:00 –¥–æ 13:59
–§–û–ö–£–°: –ü–µ—Ä–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è-—Ç—Ä–∏–≥–≥–µ—Ä –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –∞—Ç–∞–∫–∏
"""

import sqlite3
import pandas as pd
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
TOKEN_ADDRESS = 'AL2HhMQLkJqeeK5w4akoogzyYBZ6GYkBfxjscCf2L2yC'
ATTACK_HOUR_START = '2025-04-01 13:00:00'
ATTACK_HOUR_END = '2025-04-01 13:59:59'
DB_PATH = 'db/solana_db.sqlite'

def get_attack_hour_data():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —á–∞—Å –∞—Ç–∞–∫–∏"""
    conn = sqlite3.connect(DB_PATH)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    transactions_query = """
    SELECT 
        signature,
        block_time,
        fee_payer,
        transaction_type,
        datetime(block_time, 'unixepoch') as readable_time,
        strftime('%M', datetime(block_time, 'unixepoch')) as minute
    FROM transactions 
    WHERE source_query_address = ?
      AND datetime(block_time, 'unixepoch') BETWEEN ? AND ?
    ORDER BY block_time
    """
    
    df_transactions = pd.read_sql_query(
        transactions_query,
        conn,
        params=[TOKEN_ADDRESS, ATTACK_HOUR_START, ATTACK_HOUR_END]
    )
    
    # ML —Å–æ–±—ã—Ç–∏—è
    ml_events_query = """
    SELECT 
        e.signature,
        e.block_time,
        e.event_type,
        e.from_wallet,
        e.to_wallet,
        e.from_amount,
        e.to_amount,
        e.token_a_mint,
        e.token_b_mint,
        datetime(e.block_time, 'unixepoch') as readable_time,
        strftime('%M', datetime(e.block_time, 'unixepoch')) as minute,
        strftime('%S', datetime(e.block_time, 'unixepoch')) as second
    FROM ml_ready_events e
    JOIN transactions t ON e.signature = t.signature
    WHERE t.source_query_address = ?
      AND datetime(e.block_time, 'unixepoch') BETWEEN ? AND ?
    ORDER BY e.block_time
    """
    
    df_ml_events = pd.read_sql_query(
        ml_events_query,
        conn,
        params=[TOKEN_ADDRESS, ATTACK_HOUR_START, ATTACK_HOUR_END]
    )
    
    conn.close()
    return df_transactions, df_ml_events

def analyze_first_transactions(df_transactions, df_ml_events):
    """–ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π - –ø–æ–∏—Å–∫ —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
    print("üéØ –ê–ù–ê–õ–ò–ó –ü–ï–†–í–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô - –ü–û–ò–°–ö –¢–†–ò–ì–ì–ï–†–ê")
    print("=" * 50)
    
    if len(df_transactions) > 0:
        # –ü–µ—Ä–≤—ã–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        first_10 = df_transactions.head(10)
        
        print(f"üìä –ü–µ—Ä–≤—ã–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∞—Ç–∞–∫–∏:")
        print(f"{'‚è∞ –í—Ä–µ–º—è':<20} {'üëõ –ö–æ—à–µ–ª–µ–∫':<20} {'üìã –¢–∏–ø':<15}")
        print("-" * 60)
        
        for i, tx in first_10.iterrows():
            wallet = tx['fee_payer'] if tx['fee_payer'] and tx['fee_payer'] != 'Unknown' else "Unknown"
            wallet_short = wallet[:15] + "..." if len(wallet) > 15 else wallet
            print(f"{tx['readable_time']:<20} {wallet_short:<20} {tx['transaction_type']:<15}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        first_tx = df_transactions.iloc[0]
        print(f"\nüö® –ü–ï–†–í–ê–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø (–ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ô –¢–†–ò–ì–ì–ï–†):")
        print(f"   ‚è∞ –í—Ä–µ–º—è: {first_tx['readable_time']}")
        print(f"   üëõ –ö–æ—à–µ–ª–µ–∫: {first_tx['fee_payer'] or 'Unknown'}")
        print(f"   üìã –¢–∏–ø: {first_tx['transaction_type']}")
        print(f"   üîó –°–∏–≥–Ω–∞—Ç—É—Ä–∞: {first_tx['signature']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ML —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if len(df_ml_events) > 0:
            first_ml_events = df_ml_events[df_ml_events['signature'] == first_tx['signature']]
            if len(first_ml_events) > 0:
                print(f"   üé≠ ML —Å–æ–±—ã—Ç–∏—è –≤ –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:")
                for _, event in first_ml_events.iterrows():
                    from_wallet = event['from_wallet'] or 'Unknown'
                    to_wallet = event['to_wallet'] or 'Unknown'
                    print(f"      ‚Ä¢ {event['event_type']}: {from_wallet[:10]}... ‚Üí {to_wallet[:10]}...")
                    if event['from_amount'] and event['to_amount']:
                        try:
                            from_amt = float(event['from_amount'])
                            to_amt = float(event['to_amount'])
                            print(f"        üí∞ {from_amt:,.0f} ‚Üí {to_amt:,.0f}")
                        except (ValueError, TypeError):
                            print(f"        üí∞ {event['from_amount']} ‚Üí {event['to_amount']}")
    
    return first_tx if len(df_transactions) > 0 else None

def minute_by_minute_analysis(df_transactions, df_ml_events):
    """–ü–æ–º–∏–Ω—É—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    print(f"\nüìä –ü–û–ú–ò–ù–£–¢–ù–´–ô –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ù–û–°–¢–ò")
    print("=" * 40)
    
    # –ü–æ–¥—Å—á–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –º–∏–Ω—É—Ç–∞–º
    minute_counts = df_transactions.groupby('minute').agg({
        'signature': 'nunique',
        'fee_payer': 'nunique'
    }).rename(columns={'signature': 'transactions', 'fee_payer': 'unique_wallets'})
    
    # –ü–æ–¥—Å—á–µ—Ç ML —Å–æ–±—ã—Ç–∏–π –ø–æ –º–∏–Ω—É—Ç–∞–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if len(df_ml_events) > 0:
        ml_minute_counts = df_ml_events.groupby('minute').agg({
            'signature': 'nunique',
            'from_amount': lambda x: pd.to_numeric(x, errors='coerce').sum(),
            'to_amount': lambda x: pd.to_numeric(x, errors='coerce').sum()
        }).rename(columns={'signature': 'ml_events'})
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        combined_analysis = minute_counts.join(ml_minute_counts, how='outer').fillna(0)
    else:
        # –ï—Å–ª–∏ ML —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        combined_analysis = minute_counts.copy()
        combined_analysis['ml_events'] = 0
        combined_analysis['from_amount'] = 0
        combined_analysis['to_amount'] = 0
    
    print(f"üìà –ü–æ–º–∏–Ω—É—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:")
    print(f"{'–ú–∏–Ω':<5} {'–¢—Ä–∞–Ω–∑':<8} {'–ö–æ—à–µ–ª':<8} {'ML —Å–æ–±':<8} {'–û–±—ä–µ–º (–º–ª–Ω)':<12}")
    print("-" * 50)
    
    total_volume = 0
    peak_minute = None
    peak_transactions = 0
    
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –º–∏–Ω—É—Ç—ã –∏–∑ –∏–Ω–¥–µ–∫—Å–∞
    for minute in combined_analysis.index:
        minute_int = int(minute)
        minute_str = f"{minute_int:02d}"
        row = combined_analysis.loc[minute]
        
        transactions = int(row['transactions'])
        wallets = int(row['unique_wallets'])
        ml_events = int(row['ml_events'])
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—ä–µ–º–∞
        from_amount = row.get('from_amount', 0) or 0
        to_amount = row.get('to_amount', 0) or 0
        volume_millions = (from_amount + to_amount) / 2_000_000  # –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º –≤ –º–ª–Ω
        total_volume += volume_millions
        
        # –û—Ç–º–µ—á–∞–µ–º –ø–∏–∫–æ–≤—É—é –º–∏–Ω—É—Ç—É
        marker = "üî•" if transactions > peak_transactions else "  "
        if transactions > peak_transactions:
            peak_transactions = transactions
            peak_minute = minute_str
        
        print(f"{minute_str:<5} {transactions:<8} {wallets:<8} {ml_events:<8} {volume_millions:<12.1f} {marker}")
    
    print(f"\nüéØ –ö–õ–Æ–ß–ï–í–´–ï –ú–ï–¢–†–ò–ö–ò:")
    print(f"   üî• –ü–∏–∫–æ–≤–∞—è –º–∏–Ω—É—Ç–∞: 13:{peak_minute} ({peak_transactions:,} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)")
    print(f"   üí∞ –û–±—â–∏–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤: {total_volume:,.1f} –º–ª–Ω —Ç–æ–∫–µ–Ω–æ–≤")
    if len(df_transactions) > 0:
        print(f"   üìä –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {len(df_transactions) / 60:.1f} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π/–º–∏–Ω")
    
    return combined_analysis, peak_minute

def analyze_coordination_patterns(df_transactions, df_ml_events):
    """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏"""
    print(f"\nüé≠ –ê–ù–ê–õ–ò–ó –ü–ê–¢–¢–ï–†–ù–û–í –ö–û–û–†–î–ò–ù–ê–¶–ò–ò")
    print("=" * 35)
    
    # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
    df_transactions['datetime'] = pd.to_datetime(df_transactions['block_time'], unit='s')
    df_transactions['time_diff'] = df_transactions['datetime'].diff().dt.total_seconds()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    intervals = df_transactions['time_diff'].dropna()
    
    print(f"‚è±Ô∏è –í–†–ï–ú–ï–ù–ù–´–ï –ò–ù–¢–ï–†–í–ê–õ–´ –ú–ï–ñ–î–£ –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø–ú–ò:")
    print(f"   –ú–µ–¥–∏–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {intervals.median():.1f} —Å–µ–∫—É–Ω–¥")
    print(f"   –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {intervals.mean():.1f} —Å–µ–∫—É–Ω–¥")
    print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {intervals.min():.1f} —Å–µ–∫—É–Ω–¥")
    print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {intervals.max():.1f} —Å–µ–∫—É–Ω–¥")
    
    # –ü–æ–∏—Å–∫ –≤—Å–ø–ª–µ—Å–∫–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–∏–Ω—Ç–µ—Ä–≤–∞–ª—ã < 5 —Å–µ–∫—É–Ω–¥)
    rapid_transactions = intervals[intervals < 5].count()
    print(f"   üö® –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º < 5 —Å–µ–∫: {rapid_transactions} ({rapid_transactions/len(intervals)*100:.1f}%)")
    
    # –ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
    unique_wallets = df_transactions['fee_payer'].nunique()
    total_transactions = len(df_transactions)
    
    print(f"\nüë• –ê–ù–ê–õ–ò–ó –£–ß–ê–°–¢–ù–ò–ö–û–í:")
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤: {unique_wallets}")
    print(f"   –û–±—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_transactions:,}")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ –∫–æ—à–µ–ª–µ–∫: {total_transactions/unique_wallets:.1f}")
    
    # –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
    wallet_activity = df_transactions['fee_payer'].value_counts().head(5)
    print(f"\nüèÜ –¢–û–ü-5 –ê–ö–¢–ò–í–ù–´–• –ö–û–®–ï–õ–¨–ö–û–í:")
    for i, (wallet, count) in enumerate(wallet_activity.items(), 1):
        percentage = count / total_transactions * 100
        print(f"   {i}. {wallet[:20]}... : {count:,} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ({percentage:.1f}%)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏)
    same_timestamp_groups = df_transactions.groupby('block_time').size()
    coordinated_groups = same_timestamp_groups[same_timestamp_groups > 1]
    
    if len(coordinated_groups) > 0:
        print(f"\nüéØ –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ì–†–£–ü–ü–´:")
        print(f"   –ì—Ä—É–ø–ø —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º: {len(coordinated_groups)}")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã: {coordinated_groups.max()} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä—É–ø–Ω–µ–π—à–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        top_sync_groups = coordinated_groups.sort_values(ascending=False).head(3)
        for timestamp, count in top_sync_groups.items():
            readable_time = datetime.fromtimestamp(timestamp).strftime('%H:%M:%S')
            print(f"      {readable_time}: {count} —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")

def analyze_trading_patterns(df_ml_events):
    """–ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    print(f"\nüíπ –ê–ù–ê–õ–ò–ó –¢–û–†–ì–û–í–´–• –ü–ê–¢–¢–ï–†–ù–û–í")
    print("=" * 30)
    
    if len(df_ml_events) == 0:
        print("‚ö†Ô∏è ML —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
    event_types = df_ml_events['event_type'].value_counts()
    print(f"üìä –¢–ò–ü–´ –°–û–ë–´–¢–ò–ô:")
    for event_type, count in event_types.items():
        percentage = count / len(df_ml_events) * 100
        print(f"   {event_type}: {count:,} ({percentage:.1f}%)")
    
    # –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤
    df_ml_events['volume'] = pd.to_numeric(df_ml_events['from_amount'], errors='coerce')
    volumes = df_ml_events['volume'].dropna()
    
    if len(volumes) > 0:
        print(f"\nüí∞ –ê–ù–ê–õ–ò–ó –û–ë–™–ï–ú–û–í:")
        print(f"   –û–±—â–∏–π –æ–±—ä–µ–º: {volumes.sum():,.0f} —Ç–æ–∫–µ–Ω–æ–≤")
        print(f"   –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: {volumes.mean():,.0f} —Ç–æ–∫–µ–Ω–æ–≤")
        print(f"   –ú–µ–¥–∏–∞–Ω–Ω—ã–π –æ–±—ä–µ–º: {volumes.median():,.0f} —Ç–æ–∫–µ–Ω–æ–≤")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞: {volumes.max():,.0f} —Ç–æ–∫–µ–Ω–æ–≤")
        
        # –ö—Ä—É–ø–Ω—ã–µ —Å–¥–µ–ª–∫–∏ (> —Å—Ä–µ–¥–Ω–µ–≥–æ + 2œÉ)
        large_threshold = volumes.mean() + 2 * volumes.std()
        large_trades = volumes[volumes > large_threshold]
        print(f"   –ö—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ (>{large_threshold:,.0f}): {len(large_trades)}")

def create_attack_timeline(df_transactions, df_ml_events):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏ –∞—Ç–∞–∫–∏"""
    print(f"\nüìÖ –í–†–ï–ú–ï–ù–ù–ê–Ø –õ–ò–ù–ò–Ø –ê–¢–ê–ö–ò")
    print("=" * 25)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —á–∞—Å –Ω–∞ 5-–º–∏–Ω—É—Ç–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    intervals = ['00-04', '05-09', '10-14', '15-19', '20-24', '25-29', 
                '30-34', '35-39', '40-44', '45-49', '50-54', '55-59']
    
    print(f"üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ 5-–º–∏–Ω—É—Ç–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º:")
    print(f"{'–ò–Ω—Ç–µ—Ä–≤–∞–ª':<10} {'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏':<12} {'ML —Å–æ–±—ã—Ç–∏—è':<12} {'–°—Ç–∞—Ç—É—Å':<15}")
    print("-" * 55)
    
    for interval in intervals:
        start_min, end_min = map(int, interval.split('-'))
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        interval_transactions = df_transactions[
            (df_transactions['minute'].astype(int) >= start_min) & 
            (df_transactions['minute'].astype(int) <= end_min)
        ]
        
        interval_ml = df_ml_events[
            (df_ml_events['minute'].astype(int) >= start_min) & 
            (df_ml_events['minute'].astype(int) <= end_min)
        ]
        
        tx_count = len(interval_transactions)
        ml_count = len(interval_ml)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        if tx_count > 100:
            status = "üî• –ü–ò–ö–û–í–´–ô"
        elif tx_count > 10:
            status = "üìà –ê–∫—Ç–∏–≤–Ω—ã–π"
        elif tx_count > 0:
            status = "üìä –ù–∏–∑–∫–∏–π"
        else:
            status = "üí§ –¢–∏—à–∏–Ω–∞"
        
        print(f"13:{interval:<7} {tx_count:<12} {ml_count:<12} {status:<15}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–º–∏–Ω—É—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    print("üéØ –§–ê–ó–ê 2.2.1.2: –ü–û–ú–ò–ù–£–¢–ù–ê–Ø –†–ï–ö–û–ù–°–¢–†–£–ö–¶–ò–Ø –ß–ê–°–ê –ê–¢–ê–ö–ò")
    print("=" * 65)
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {ATTACK_HOUR_START} - {ATTACK_HOUR_END}")
    print(f"üéØ –¶–µ–ª—å: –†–µ–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ö–∞–Ω–∏–∫—É —Å–∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞—Ç–∞–∫–∏")
    print(f"üìä –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df_transactions, df_ml_events = get_attack_hour_data()
    
    print(f"\nüìä –ó–ê–ì–†–£–ñ–ï–ù–û –î–ê–ù–ù–´–•:")
    print(f"   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(df_transactions):,}")
    print(f"   ML —Å–æ–±—ã—Ç–∏–π: {len(df_ml_events):,}")
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤: {df_transactions['fee_payer'].nunique()}")
    
    # –ê–Ω–∞–ª–∏–∑—ã
    first_tx = analyze_first_transactions(df_transactions, df_ml_events)
    combined_analysis, peak_minute = minute_by_minute_analysis(df_transactions, df_ml_events)
    analyze_coordination_patterns(df_transactions, df_ml_events)
    analyze_trading_patterns(df_ml_events)
    create_attack_timeline(df_transactions, df_ml_events)
    
    print(f"\nüéâ –ü–û–ú–ò–ù–£–¢–ù–ê–Ø –†–ï–ö–û–ù–°–¢–†–£–ö–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
    print(f"üìä –ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏:")
    print(f"   üö® –¢—Ä–∏–≥–≥–µ—Ä: {first_tx['readable_time'] if first_tx is not None else '–ù–µ –Ω–∞–π–¥–µ–Ω'}")
    print(f"   üî• –ü–∏–∫–æ–≤–∞—è –º–∏–Ω—É—Ç–∞: 13:{peak_minute if peak_minute else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}")
    print(f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {df_transactions['fee_payer'].nunique()}")
    print(f"   üí£ –û–±—â–∏–π —É—Ä–æ–Ω: {len(df_transactions):,} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 1 —á–∞—Å")

if __name__ == "__main__":
    main() 